#  This file is part of SenkoGuardianModules
#  Copyright (c) 2025 Senko
#  This software is released under the MIT License.
#  https://opensource.org/licenses/MIT

# meta developer: @SenkoGuardianModules

from hikkatl.types import Message
from .. import loader, utils
import random

@loader.tds
class NekoEditorMod(loader.Module):
    """Neko-—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π | –í–ª–∞–¥–µ–ª–µ—Ü—ã: @SstAngelStar √ó @ilovesenko """
    strings = {
        "name": "NekoEditor",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "enabled",
                False,
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                validator=loader.validators.Boolean()
            )
        )

    async def nekoedcmd(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Neko-—Ä–µ–∂–∏–º–æ–º | .nekoed [on/off]"""
        args = utils.get_args_raw(message)
        me = await message.client.get_me()
        is_premium = getattr(me, 'premium', False)
        if not args:
            status = "–≤–∫–ª—é—á—ë–Ω" if self.config["enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω"
            return await utils.answer(message, f"üê± NekoEditor: {status}")
        if args.lower() in ["on", "–≤–∫–ª", "1"]:
            self.config["enabled"] = True
            if is_premium:
                await utils.answer(message, '<emoji document_id="5335044582218412321">‚ò∫Ô∏è</emoji> –†–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω! Nya~')
            else:
                await utils.answer(message, "üêæ –†–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω! Nya~")
        elif args.lower() in ["off", "–≤—ã–∫–ª", "0"]:
            self.config["enabled"] = False
            if is_premium:
                await utils.answer(message, '<emoji document_id="5377309873614627829">üëå</emoji> –†–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω... >_<')
            else:
                await utils.answer(message, "üåÄ –†–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω... &gt;_&lt;")
        self.db.set("NekoEditor", "enabled", self.config["enabled"])

    async def watcher(self, message: Message):
        if (
            not self.config["enabled"]
            or not getattr(message, "out", False)
            or getattr(message, "fwd_from", None)
            or getattr(message, "forward", None)
            or not message.text
            or "nekoed" in message.raw_text.lower()
        ):
            return
        modified_text = message.text
        replacements = {
            "—Ä": "w",
            "–ª": "w",
            "–Ω–æ": "–Ω—è",
            "–Ω–∞": "–Ω—è"
        }
        for old, new in replacements.items():
            modified_text = modified_text.replace(old, new)
        neko_words = ["Nya~", "UwU", "OwO", ">_<", "^^", "(‚âß‚ñΩ‚â¶)"]
        neko_word = random.choice(neko_words)
        escaped_neko_word = utils.escape_html(neko_word)
        if random.random() < 0.5:
            modified_text = f"{escaped_neko_word} {modified_text}"
        else:
            modified_text = f"{modified_text} {escaped_neko_word}"
        try:
            await message.edit(modified_text, parse_mode="html")
        except Exception:
            pass
