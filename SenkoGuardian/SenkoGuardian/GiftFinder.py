#  This file is part of SenkoGuardianModules
#  Copyright (c) 2025 Senko
#  This software is released under the MIT License.
#  https://opensource.org/licenses/MIT

# meta developer: @SenkoGuardianModules

import asyncio
import random
import re
from hikkatl.types import Message, StarGiftUnique
from .. import loader, utils
from hikkatl.tl.functions.payments import GetSavedStarGiftsRequest
from hikkatl.tl.functions.channels import GetFullChannelRequest
from hikkatl.errors.rpcerrorlist import DocumentInvalidError, FloodWaitError, ChatAdminRequiredError
from telethon.tl.types import Channel
from telethon.utils import get_display_name

@loader.tds
class GiftFinderMod(loader.Module):
    """–ü–∞—Ä—Å–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å NFT-–ø–æ–¥–∞—Ä–∫–∞–º–∏ –≤ —á–∞—Ç–µ."""
    strings = {
        "name": "GiftFinder",
        "not_a_chat": "üö´ <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.</b>",
        "scanning": "<emoji document_id=5464429933543628237>‚è≥</emoji> <b>–°–∫–∞–Ω–∏—Ä—É—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</b>",
        "scanning_supplement": "<emoji document_id=5464429933543628237>‚è≥</emoji> <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–ø–æ–ª–æ–Ω. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞–Ω–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è...</b>",
        "scanning_messages_only": "<emoji document_id=5464429933543628237>‚è≥</emoji> <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–∫—Ä—ã—Ç—ã. –°–∫–∞–Ω–∏—Ä—É—é —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è...</b>",
        "header": "<emoji document_id=5237868881267153432>üîñ</emoji> –¢–µ —É –∫–æ–≥–æ –µ—Å—Ç—å –ù–§–¢ –ø–æ–¥–∞—Ä–∫–∏:",
        "premium_star": "<emoji document_id=5274026806477857971>‚≠êÔ∏è</emoji>",
        "flood_wait": "\n<emoji document_id=5212102117953384237>üòñ</emoji> –ü–æ–π–º–∞–ª FloodWait –Ω–∞ {} —Å–µ–∫—É–Ω–¥. –£–≤–µ–ª–∏—á–∏–≤–∞—é –∑–∞–¥–µ—Ä–∂–∫—É –∏ –∂–¥—É...",
        "scanning_safe": "‚è≥ <b>–°–∫–∞–Ω–∏—Ä—É—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</b>",
        "scanning_supplement_safe": "‚è≥ <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–ø–æ–ª–æ–Ω. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞–Ω–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è...</b>",
        "scanning_messages_only_safe": "‚è≥ <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–∫—Ä—ã—Ç—ã. –°–∫–∞–Ω–∏—Ä—É—é —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è...</b>",
        "flood_wait_safe": "\nüòñ –ü–æ–π–º–∞–ª FloodWait –Ω–∞ {} —Å–µ–∫—É–Ω–¥. –£–≤–µ–ª–∏—á–∏–≤–∞—é –∑–∞–¥–µ—Ä–∂–∫—É –∏ –∂–¥—É...",
        "no_users_found": "üö´ <b>–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å NFT-–ø–æ–¥–∞—Ä–∫–∞–º–∏.</b>",
    }

    async def _safe_edit(self, msg, text_premium, text_safe):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏, –æ—Ç–∫–∞—Ç—ã–≤–∞—è—Å—å –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ.""" # —Ö–∑, –ø–∞–¥–∞–µ—Ç –∞ —Ç–æ —á–∞—Å—Ç–æ
        try:
            await msg.edit(text_premium)
        except DocumentInvalidError:
            await msg.edit(text_safe)

    async def giftscancmd(self, message: Message):
        """
        –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å NFT-–ø–æ–¥–∞—Ä–∫–∞–º–∏ –≤ —á–∞—Ç–µ.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .giftscan [–ª–∏–º–∏—Ç] –∏–ª–∏ .giftscan [ID —á–∞—Ç–∞] [–ª–∏–º–∏—Ç]
        """
        args = utils.get_args_raw(message)
        chat_arg = None
        msgs_limit = 3000
        if args:
            parts = args.split()
            if parts[0].isdigit() and len(parts) == 1:
                msgs_limit = int(parts[0])
            else:
                chat_arg = parts[0]
                if len(parts) > 1 and parts[1].isdigit():
                    msgs_limit = int(parts[1])
        try:
            msg = await utils.answer(message, self.strings("scanning"))
        except DocumentInvalidError:
            msg = await utils.answer(message, self.strings("scanning_safe"))
        try:
            chat = await self.client.get_entity(chat_arg) if chat_arg else await message.get_chat()
        except Exception:
            await msg.edit(self.strings("not_a_chat"))
            return
        user_ids = set()
        scan_messages_mode = False
        try:
            if isinstance(chat, Channel):
                full_chat = await self.client(GetFullChannelRequest(channel=chat))
                total_participants = full_chat.full_chat.participants_count
            else:
                total_participants = chat.participants_count
            participants = await self.client.get_participants(chat)
            user_ids.update(user.id for user in participants)
            if len(participants) < total_participants:
                scan_messages_mode = True
                await self._safe_edit(msg, self.strings("scanning_supplement"), self.strings("scanning_supplement_safe"))
        except (ChatAdminRequiredError, AttributeError, TypeError, ValueError):
            scan_messages_mode = True
            await self._safe_edit(msg, self.strings("scanning_messages_only"), self.strings("scanning_messages_only_safe"))
        if scan_messages_mode:
            async for m in self.client.iter_messages(chat, limit=msgs_limit):
                if m.from_id and hasattr(m.from_id, 'user_id'):
                    user_ids.add(m.from_id.user_id)
        found_users = []
        base_delay_min, base_delay_max, flood_penalty = 0.5, 1.5, 0.0
        for user_id in user_ids:
            try:
                user = await self.client.get_entity(user_id)
                if user.bot or user.is_self: continue
            except Exception: continue
            await asyncio.sleep(random.uniform(base_delay_min + flood_penalty, base_delay_max + flood_penalty))
            while True:
                try:
                    all_gifts = await self.client(GetSavedStarGiftsRequest(peer=user, offset="", limit=100))
                    if gifts := [g for g in all_gifts.gifts if isinstance(g.gift, StarGiftUnique)]:
                        raw_name = get_display_name(user)
                        s_name = re.sub(r'[\u2066-\u2069\u200e\u200f\u202a-\u202e\u3164\u115f\u2800]', '', raw_name).strip()
                        link_text = f"@{user.username}" if not s_name and user.username else (f"User ID: {user.id}" if not s_name else utils.escape_html(s_name))
                        link = f'<a href="https://t.me/{user.username}">{link_text}</a>' if user.username else f'<a href="tg://user?id={user.id}">{link_text}</a>'
                        p_icon = self.strings('premium_star') if getattr(user, 'premium', False) else ""
                        found_users.append(f"‚Ä¢ {p_icon} {link}  -  {len(gifts)}")
                    break
                except FloodWaitError as e:
                    premium_text = self.strings("scanning") + self.strings("flood_wait").format(e.seconds)
                    safe_text = self.strings("scanning_safe") + self.strings("flood_wait_safe").format(e.seconds)
                    await self._safe_edit(msg, premium_text, safe_text)
                    flood_penalty += 0.2
                    await asyncio.sleep(e.seconds)
                    continue
                except Exception: break
        if not found_users:
            await msg.edit(self.strings("no_users_found"))
            return
        user_list = "\n".join(found_users)
        # –Ω—É —Ç—É—Ç –≤—Å–µ —è—Å–Ω–æ
        response_text = f"{self.strings('header')}\n<blockquote expandable>{user_list}</blockquote>"
        safe_header = "üîñ " + self.strings("header").split("</emoji>")[1]
        safe_list = [line.replace(self.strings("premium_star"), "‚≠êÔ∏è") for line in found_users]
        safe_user_list = '\n'.join(safe_list)
        response_text_safe = f"{safe_header}\n<blockquote expandable>{safe_user_list}</blockquote>"
        await self._safe_edit(msg, response_text, response_text_safe)
