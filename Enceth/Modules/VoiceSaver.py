# meta developer: @Enceth

from .. import loader
from telethon.tl.types import Message
import os
import json

@loader.tds
class VoiceSaverMod(loader.Module):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    strings = {"name": "VoiceSaver"}

    def __init__(self):
        self.config_dir = os.path.join(os.path.expanduser("~"), ".voicesaver")
        os.makedirs(self.config_dir, exist_ok=True)
        self.json_path = os.path.join(self.config_dir, "voices.json")
        if not os.path.exists(self.json_path):
            with open(self.json_path, "w") as f:
                json.dump({}, f)

    def _load_db(self):
        with open(self.json_path, "r") as f:
            return json.load(f)

    def _save_db(self, db):
        with open(self.json_path, "w") as f:
            json.dump(db, f, indent=4)

    async def savevcmd(self, message: Message):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .savev <–∏–º—è> (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ –≥—Å)"""
        args = message.raw_text.split(maxsplit=1)
        if len(args) < 2:
            await message.edit("–£–∫–∞–∂–∏ –∏–º—è –¥–ª—è –≥—Å")
            return
        name = args[1].strip()
        reply = await message.get_reply_message()
        if not reply or not reply.voice:
            await message.edit("–û—Ç–≤–µ—Ç—å –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        path = os.path.join(self.config_dir, f"{name}.ogg")
        await reply.download_media(file=path)
        db = self._load_db()
        db[name] = path
        self._save_db(db)
        await message.edit(f"–ì—Å `{name}` —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

    async def delvcmd(self, message: Message):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≥—Å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .delv <–∏–º—è>"""
        args = message.raw_text.split(maxsplit=1)
        if len(args) < 2:
            await message.edit("–£–∫–∞–∂–∏ –∏–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        name = args[1].strip()
        db = self._load_db()
        if name not in db:
            await message.edit("–¢–∞–∫–æ–≥–æ –≥—Å –Ω–µ—Ç")
            return
        os.remove(db[name])
        del db[name]
        self._save_db(db)
        await message.edit(f" –ì—Å `{name}` —É–¥–∞–ª–µ–Ω–æ")

    async def listvcmd(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≥—Å"""
        db = self._load_db()
        if not db:
            await message.edit("–ì—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        text = "üéµ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≥—Å:\n" + "\n".join(f"- {name}" for name in db)
        await message.edit(text)

    async def voicecmd(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≥—Å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .voice <–∏–º—è>"""
        args = message.raw_text.split(maxsplit=1)
        if len(args) < 2:
            await message.edit("–£–∫–∞–∂–∏ –∏–º—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
            return
        name = args[1].strip()
        db = self._load_db()
        if name not in db:
            await message.edit("–¢–∞–∫–æ–≥–æ –≥—Å –Ω–µ—Ç")
            return
        await message.delete()
        reply = await message.get_reply_message()
        await message.client.send_file(
            message.to_id,
            db[name],
            voice_note=True,
            reply_to=reply.id if reply else None,
        )