# meta developer: @hikkagpt
import json
import logging
import aiohttp
from .. import loader, utils
from telethon import events
import requests
from telethon import events
from .. import loader, utils
import re
from time import sleep
from bs4 import BeautifulSoup
import base64
from telethon.tl.custom import Message
import os
import io
import random # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ 'random'

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
try:
    import speech_recognition as sr
    from pydub import AudioSegment
    SPEECH_RECOGNITION_AVAILABLE = True
except ImportError:
    SPEECH_RECOGNITION_AVAILABLE = False


available_models = {
    "1": "o3-PRO",
    "2": "o1-PRO",
    "3": "o3-Mini-High",
    "4": "Grok 3",
    "5": "GPT 4.1",
    "6": "qwen3-235b-a22b",
    "7": "qwen-max-latest",
    "8": "qwen-plus-2025-01-25",
    "9": "qwen-turbo-2025-02-11",
    "10": "qwen2.5-coder-32b-instruct",
    "11": "qwen2.5-72b-instruct",
    "12": "gpt-4.5",
    "13": "gpt-4o",
    "14": "gpt-4o-mini",
    "15": "gpt4-turbo",
    "16": "gpt-3.5-turbo",
    "17": "gpt-4",
    "18": "deepseek-v3",
    "19": "deepseek-r1",
    "20": "gemini-1.5 Pro",
    "21": "gemini-2.5-pro-exp-03-25",
    "22": "gemini-2.5-flash",
    "23": "gemini-2.0-flash",
    "24": "llama-4-maverick",
    "25": "llama-4-scout",
    "26": "llama-3.3-70b",
    "27": "llama-3.3-8b",
    "28": "llama-3.1",
    "29": "llama-2",
    "30": "claude-3.5-sonnet",
    "31": "claude-3-haiku",
    "32": "bard",
    "33": "qwen",
    "34": "t-pro",
    "35": "t-lite"
}


# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–µ–π
PERSONAS_FILE = "personas.json"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_personas():
    try:
        with open(PERSONAS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–µ–π –≤ —Ñ–∞–π–ª
def save_personas(personas):
    with open(PERSONAS_FILE, "w", encoding="utf-8") as f:
        json.dump(personas, f, indent=4)


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è
personas = load_personas()


@loader.tds
class AIModule(loader.Module):
    """
üß† –ú–æ–¥—É–ª—å Zetta - AI Models
>> –ß–∞—Å—Ç—å —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Zetta - AI models <<
üåí Version: 13.0 | fastZetta Beta 2 | New settings
–û—Å–Ω–æ–≤–∞–Ω–Ω–æ –Ω–∞ –±–∞–∑–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ API - @OnlySq

üìç–û–ø–∏—Å–∞–Ω–∏–µ:
–ú–æ–¥—É–ª—å –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ 35 –º–æ–¥–µ–ª–∏ –ò–ò, –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —Ç–∞–∫ –∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ–±—â–µ–Ω–∏—è/–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.

üîÄ–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:

–û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å:
.ai <–∑–∞–ø—Ä–æ—Å> - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞. –û—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.

–ß–∞—Ç:
.chat - –≤–µ–¥–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –ò–ò, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã. –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã.
.mode <all/reply/friends/random> - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç–µ.

FastZetta:
.fastzetta on - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±—ã—Å—Ç—Ä—ã–π –≤—ã–∑–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ "–ó–µ—Ç—Ç–∞" –≤ —á–∞—Ç–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.
–¢–µ–ø–µ—Ä—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–º—è—Ç–∏ (.zettacfg –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
.fastclear - –æ—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å FastZetta –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.
–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã, –ª–∏–±–æ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º.

–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤:
–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –≤—ã–ø–æ–ª–Ω—è—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∏ –∏—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ *.switchplugin.*

–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .rewrite –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤.

–†–∞–±–æ—Ç–∞ —Å Hikka Userbot:
–ö–æ–º–∞–Ω–¥—ã aisup –∏ aicreate –∑–∞–¥–µ–π—Å—Ç–≤—É—é—Ç –¥–æ–æ–±—É—á–µ–Ω—ã–µ –º–æ–¥–µ–ª–∏ GPT, –∏ –º–æ–≥—É—Ç –∑–∞–º–µ–Ω–∏—Ç—å –≤–∞–º —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Hikka –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–º –º–æ–¥—É–ª—å.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 35 –º–æ–¥–µ–ª–µ–π –ò–ò.
- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
- –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram.
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á.
    """
    strings = {"name": "Zetta - AI models"}

    def __init__(self):
        super().__init__()
        self.default_model = "gpt-4o-mini"
        self.active_chats = {}
        self.chat_history = {}
        self.chat_archive = {}
        self.role = {}
        self.response_mode = {}
        self.edit_promt = "off"
        self.instructions = self.get_instructions()
        self.module_instructions = self.get_module_instruction()
        self.double_instructions = self.get_double_instruction()
        self.allmodule_instruction = self.get_allmodule_instruction()
        self.module_instruction2 = self.get_module_instruction2()
        self.module_instruction3 = self.get_module_instruction3()
        self.allmodule_instruction2 = self.get_allmodule_instruction2()
        self.metod = "on"
        self.provider = 'OnlySq-Zetta'
        self.api_key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        self.humanmode = 'off'
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è .fastzetta
        self.fastzetta_active_chats = {}
        self.fastzetta_trigger_word = "Zetta"
        self.fastzetta_friends = []
        # –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–∞–º—è—Ç–∏ FastZetta
        self.fastzetta_memory_enabled = 'off'
        self.fastzetta_history = {}


    def get_instructions(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/data-set1.txt'
        response = requests.get(url)
        return response.text

    def get_module_instruction(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/module_set.txt'
        response = requests.get(url)
        return response.text

    def get_double_instruction(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/data-set2.txt'
        response = requests.get(url)
        return response.text

    def get_allmodule_instruction2(self):
        url = "https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/data-set4.txt"
        response = requests.get(url)
        return response.text

    def get_allmodule_instruction(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/data-set3.txt'
        response = requests.get(url)
        return response.text

    def get_module_instruction2(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/module_set2.txt'
        response = requests.get(url)
        return response.text

    def get_module_instruction3(self):
        url = 'https://raw.githubusercontent.com/Chaek1403/VAWEIRR/refs/heads/main/module_set3.txt'
        response = requests.get(url)
        return response.text


    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.active_chats = self.db.get("AIModule", "active_chats", {})
        self.chat_history = self.db.get("AIModule", "chat_history", {})
        self.chat_archive = self.db.get("AIModule", "chat_archive", {})
        self.role = self.db.get("AIModule", "role", {})
        self.response_mode = self.db.get("AIModule", "response_mode", {})
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è FastZetta
        self.fastzetta_active_chats = self.db.get("AIModule", "fastzetta_active_chats", {})
        self.fastzetta_trigger_word = self.db.get("AIModule", "fastzetta_trigger_word", "Zetta")
        self.fastzetta_friends = self.db.get("AIModule", "fastzetta_friends", [])
        self.humanmode = self.db.get("AIModule", "humanmode", 'off')
        self.edit_promt = self.db.get("AIModule", "edit_promt", 'off')
        self.metod = self.db.get("AIModule", "metod", 'on')
        self.provider = self.db.get("AIModule", "provider", 'OnlySq-Zetta')
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.fastzetta_memory_enabled = self.db.get("AIModule", "fastzetta_memory_enabled", 'off')
        self.fastzetta_history = self.db.get("AIModule", "fastzetta_history", {})


    async def handle_voice_message(self, voice_message: Message, status_message: Message):
        if not SPEECH_RECOGNITION_AVAILABLE:
            if status_message:
                await utils.answer(status_message, "üö´ <b>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.</b>\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–∞–º–∏: `pip install SpeechRecognition pydub`")
            return None

        if status_message:
            await status_message.edit("<b>üé§ –°–ª—É—à–∞—é..</b>")
        
        voice_file = io.BytesIO()
        try:
            await voice_message.download_media(file=voice_file)
            voice_file.seek(0)
            audio = AudioSegment.from_file(voice_file, format="ogg")
            wav_io = io.BytesIO()
            audio.export(wav_io, format="wav")
            wav_io.seek(0)
            
            recognizer = sr.Recognizer()
            with sr.AudioFile(wav_io) as source:
                audio_data = recognizer.record(source)
            
            text = recognizer.recognize_google(audio_data, language="ru-RU")
            return text
        except sr.UnknownValueError:
            if status_message:
                await status_message.edit("<b>üîá –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.</b>")
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return None
        except sr.RequestError as e:
            if status_message:
                await status_message.edit(f"<b>üö´ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:</b> `{e}`")
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return None
        except Exception as e:
            if status_message:
                await status_message.edit(f"<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞:</b> `{e}`")
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

    def _create_zettacfg_buttons(self):
        buttons = [
            [{"text": "Super promt", "callback": self._zettacfg, "args": ("superpromt",)}],
            [{"text": "Human mode", "callback": self._zettacfg, "args": ("humanmode",)}],
            [{"text": "Ultra mode", "callback": self._zettacfg, "args": ("ultramode",)}],
            [{"text": "API provider", "callback": self._zettacfg, "args": ("apiswitch",)}],
            [{"text": "FastZetta Memory", "callback": self._zettacfg, "args": ("fastzetta_memory",)}] # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        ]
        return buttons

    async def zettacfgcmd(self, message):
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è
        """
        await self.inline.form(
            text="üîß<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>",
            message=message,
            reply_markup=self._create_zettacfg_buttons()
        )

    async def _zettacfg(self, call, setting):
        if setting == "superpromt":
            text = "<b>üí´ –£–ª—É—á—à–∞–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é –ò–ò –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –µ–≥–æ –º–æ–¥–µ–ª–∏ –ò–ò.</b>"
            current = self.edit_promt
        elif setting == "humanmode":
            text = "<b>üí¨ –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏–ø–∏—Å–∫—É '–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏...' –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞.</b>"
            current = self.humanmode
        elif setting == "ultramode":
            text = "üìö <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è aisup. –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.</b>"
            current = self.metod
        elif setting == "apiswitch":
            text = "<b>üîÑ –ü—Ä–æ–≤–∞–π–¥–µ—Ä API –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤.\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: OnlySq-Zetta AI</b>"
            current = self.provider
        elif setting == "fastzetta_memory": # –ù–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            text = "<b>üß† –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–∞–º—è—Ç—å (–∫–æ–Ω—Ç–µ–∫—Å—Ç) –¥–ª—è —Ä–µ–∂–∏–º–∞ FastZetta.</b>\n–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, FastZetta –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ."
            current = self.fastzetta_memory_enabled
        else:
            text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞."
            current = "off"

        if setting in ("superpromt", "humanmode", "ultramode", "fastzetta_memory"):
            btn_on_text = "–í–∫–ª" + (" üü£" if current == "on" else "")
            btn_off_text = "–í—ã–∫–ª" + (" üü£" if current == "off" else "")
            buttons = [
                [{"text": btn_on_text, "callback": self._zettaset, "args": (setting, "on")}],
                [{"text": btn_off_text, "callback": self._zettaset, "args": (setting, "off")}],
                [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self._back_zettacfg}]
            ]
        elif setting == "apiswitch":
            btn_on_text = "OnlySq-Zetta AI" + (" üü£" if current == "OnlySq-Zetta" else "")
            btn_off_text = "Devj" + (" üü£" if current == "Devj" else "")
            buttons = [
                [{"text": btn_on_text, "callback": self._zettaset, "args": (setting, "OnlySq-Zetta")}],
                [{"text": btn_off_text, "callback": self._zettaset, "args": (setting, "Devj")}],
                [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self._back_zettacfg}]
            ]
        else:
            buttons = [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self._back_zettacfg}]]

        await call.edit(text, reply_markup=buttons)

    async def _zettaset(self, call, setting, value):
        if setting == "superpromt":
            self.edit_promt = value
            self.db.set("AIModule", "edit_promt", value)
        elif setting == "humanmode":
            self.humanmode = value
            self.db.set("AIModule", "humanmode", value)
        elif setting == "ultramode":
            self.metod = value
            self.db.set("AIModule", "metod", value)
        elif setting == "apiswitch":
            self.provider = value
            self.db.set("AIModule", "provider", value)
        elif setting == "fastzetta_memory": # –ù–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            self.fastzetta_memory_enabled = value
            self.db.set("AIModule", "fastzetta_memory_enabled", value)

        await self._zettacfg(call, setting)

    async def _back_zettacfg(self, call):
        await call.edit("üîß<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>", reply_markup=self._create_zettacfg_buttons())
        
    @loader.unrestricted
    async def aisupcmd(self, message):
        """
        –°–ø—Ä–æ—Å–∏—Ç—å —É AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è Hikka.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.aisup <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.aisup`
        """
        r = "sup"
        await self.process_request(message, self.instructions, r)

    @loader.unrestricted
    async def modelcmd(self, message):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –ò–ò –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.model <–Ω–æ–º–µ—Ä>` –∏–ª–∏ `.model list` –¥–ª—è —Å–ø–∏—Å–∫–∞.
        """
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("ü§î <b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ –∏–ª–∏ list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞.</b>")
            return

        if args == "list":
            model_list = "\n".join([f"<b>{k}.</b> {v}" for k, v in available_models.items()])
            await message.edit(f"üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n{model_list}")
            return

        if args not in available_models:
            await message.edit("üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏.</b>")
            return

        self.default_model = available_models[args]
        await message.edit(f"‚úÖ <b>–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:</b> {self.default_model}")

    @loader.unrestricted
    async def chatcmd(self, message):
        """
        –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —á–∞—Ç–∞.
        """
        chat_id = str(message.chat_id)
        if self.active_chats.get(chat_id):
            self.active_chats.pop(chat_id, None)
            self.db.set("AIModule", "active_chats", self.active_chats)

            if chat_id in self.chat_history:
                self.chat_archive[chat_id] = self.chat_history[chat_id]
                self.chat_history.pop(chat_id, None)
                self.db.set("AIModule", "chat_history", self.chat_history)
                self.db.set("AIModule", "chat_archive", self.chat_archive)
                await message.edit("üì¥ <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω. –ò—Å—Ç–æ—Ä–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.</b>")
            else:
                await message.edit("üì¥ <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω.</b>")
        else:
            self.active_chats[chat_id] = True
            self.db.set("AIModule", "active_chats", self.active_chats)

            if chat_id in self.chat_archive:
                self.chat_history[chat_id] = self.chat_archive[chat_id]
                self.chat_archive.pop(chat_id, None)
                self.db.set("AIModule", "chat_history", self.chat_history)
                self.db.set("AIModule", "chat_archive", self.chat_archive)
                await message.edit("üí¨ <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω. –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞.</b>")
            else:
                await message.edit("üí¨ <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω.</b>")

    async def send_request_to_api(self, message, instructions, request_text, model="gpt-4o-mini", history_list=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç. –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é."""
        api_url = "http://109.172.94.236:5001/OnlySq-Zetta/v1/models" if self.provider == "OnlySq-Zetta" else "https://api.vysssotsky.ru/"

        if self.provider == 'devj':
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è devj –Ω–µ –º–µ–Ω—è–ª–∞—Å—å, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–ª –µ–≥–æ
            messages_for_payload = [{"role": "user", "content": f"{instructions}\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request_text}"}]
            if history_list:
                messages_for_payload = history_list

            payload = {
                "model": "gpt-4",
                "messages": messages_for_payload,
                "max_tokens": 10048,
                "temperature": 0.7,
                "top_p": 1,
            }
            # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è devj
            return "–ü—Ä–æ–≤–∞–π–¥–µ—Ä devj –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"

        else: # –õ–æ–≥–∏–∫–∞ –¥–ª—è OnlySq-Zetta
            if history_list:
                messages_for_payload = history_list
            else:
                content = f"{instructions}\n–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. –¢–∞–∫–∂–µ –ø–æ–º–Ω–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —á–∞—Å—Ç–∏ –º–æ–¥—É–ª—è, –µ—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞. –ò –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –¥–∞–ª—å—à–µ.\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request_text}"
                if not instructions:
                    content = request_text
                messages_for_payload = [{"role": "user", "content": content}]
            
            payload = {
                "model": 'gemini-2.5-flash',
                "request": {"messages": messages_for_payload}
            }
            
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post(api_url, json=payload) as response:
                        response.raise_for_status()
                        data = await response.json()
                        answer = data.get("answer", "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.").strip()
                        decoded_answer = base64.b64decode(answer).decode('utf-8')
                        return decoded_answer
            except aiohttp.ClientError as e:
                if instructions == "" or history_list is not None:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è fastzetta –∏–ª–∏ —á–∞—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π: {e}")
                    return None
                else:
                    await message.edit(f"<b>–£ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ... –Ω–µ–ø–æ–ª–∞–¥–∫–∏. \n\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: OnlySq in Telegram </b>")
                    return None
                    
    @loader.unrestricted
    async def modecmd(self, message):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –ò–ò.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.mode <reply/all/random/friends>`
        """
        chat_id = str(message.chat_id)
        args = utils.get_args_raw(message)
        valid_modes = ("reply", "all", "random", "friends")
        if not args or args not in valid_modes:
            await message.edit("ü§î <b>–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞: `reply`, `all`, `random` –∏–ª–∏ `friends`.</b>")
            return

        self.response_mode[chat_id] = args
        self.db.set("AIModule", "response_mode", self.response_mode)
        await message.edit(f"‚úÖ <b>–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:</b> `{args}`")

    @loader.unrestricted
    async def watcher(self, message):
        """
        –°–ª–µ–¥–∏—Ç –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º —á–∞—Ç–∞.
        """
        chat_id = str(message.chat_id)
        if not self.active_chats.get(chat_id):
            return
            
        if message.out and message.text and message.text.startswith('.'):
            return

        mode = self.response_mode.get(chat_id, "all")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ 'reply'
        if mode == "reply" and not (message.is_reply and await self.is_reply_to_bot(message)):
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ 'random'
        if mode == "random" and random.randint(1, 10) != 10:
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ 'friends'
        if mode == "friends":
            me_id = (await self.client.get_me()).id
            friend_ids = [f['id'] for f in self.fastzetta_friends]
            if message.sender_id not in friend_ids and message.sender_id != me_id:
                return

        request_text = ""
        if message.voice:
            processing_msg = await message.reply("<b>üé§ –°–ª—É—à–∞—é...</b>")
            request_text = await self.handle_voice_message(voice_message=message, status_message=processing_msg)
            if processing_msg: await processing_msg.delete()
        elif message.text:
            request_text = message.text.strip()
        
        if request_text:
            user_name = await self.get_user_name(message)
            await self.respond_to_message(message, user_name, request_text)
            
    @loader.unrestricted
    async def fastclearcmd(self, message):
        """
        –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é FastZetta –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.
        """
        chat_id = str(message.chat_id)
        if chat_id in self.fastzetta_history:
            self.fastzetta_history.pop(chat_id, None)
            self.db.set("AIModule", "fastzetta_history", self.fastzetta_history)
            await utils.answer(message, "‚ö°Ô∏è <b>–ò—Å—Ç–æ—Ä–∏—è FastZetta –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.</b>")
        else:
            await utils.answer(message, "üì≠Ô∏è <b>–ò—Å—Ç–æ—Ä–∏—è FastZetta –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –ø—É—Å—Ç–∞.</b>")

    @loader.watcher(no_commands=True)
    async def watcher_fastzetta(self, message):
        """
        –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è —Ä–µ–∂–∏–º–∞ FastZetta —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–º—è—Ç–∏.
        """
        chat_id = str(message.chat_id)
        if not self.fastzetta_active_chats.get(chat_id):
            return
        if message.out and message.text and message.text.startswith('.'):
            return

        sender_id = message.sender_id
        me = await self.client.get_me()
        if self.fastzetta_friends and sender_id != me.id and sender_id not in [f['id'] for f in self.fastzetta_friends]:
            return

        request_text = ""
        if message.voice:
            request_text = await self.handle_voice_message(voice_message=message, status_message=None)
        elif message.text:
            request_text = message.text.strip()
        
        if not request_text:
            return

        trigger_pattern = r"^{}\s*".format(re.escape(self.fastzetta_trigger_word))
        match = re.match(trigger_pattern, request_text, re.IGNORECASE)

        if match:
            query = request_text[match.end():].strip()
            if not query: return

            answer = None
            history_for_api = None
            
            try:
                # –õ–æ–≥–∏–∫–∞ —Å –ø–∞–º—è—Ç—å—é
                if self.fastzetta_memory_enabled == 'on':
                    if chat_id not in self.fastzetta_history:
                        self.fastzetta_history[chat_id] = []
                    
                    self.fastzetta_history[chat_id].append({"role": "user", "content": query})
                    
                    if len(self.fastzetta_history[chat_id]) > 20:
                       self.fastzetta_history[chat_id] = self.fastzetta_history[chat_id][-20:]

                    history_for_api = self.fastzetta_history[chat_id]
                    # –í—ã–∑—ã–≤–∞–µ–º API —Å –∏—Å—Ç–æ—Ä–∏–µ–π
                    answer = await self.send_request_to_api(message, "", "", history_list=history_for_api)
                else:
                    # –í—ã–∑—ã–≤–∞–µ–º API –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
                    answer = await self.send_request_to_api(message, "", query)

                if answer:
                    if self.humanmode == 'on':
                        await message.reply(answer)
                    else:
                        await message.reply(f"<b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ {self.default_model}:</b>\n{answer}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –ø–∞–º—è—Ç—å –≤–∫–ª—é—á–µ–Ω–∞
                    if self.fastzetta_memory_enabled == 'on':
                        self.fastzetta_history[chat_id].append({"role": "assistant", "content": answer})
                        self.db.set("AIModule", "fastzetta_history", self.fastzetta_history)
            except Exception as e:
                logging.error(f"[FastZetta Watcher] Error: {e}", exc_info=True)


    # --- –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
    # (–Ø —Å–∫–æ–ø–∏—Ä—É—é –µ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª)

    @loader.unrestricted
    async def clearcmd(self, message):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ –ò–ò
        """
        chat_id = str(message.chat_id)
        if chat_id in self.chat_history or chat_id in self.chat_archive:
            self.chat_history.pop(chat_id, None)
            self.chat_archive.pop(chat_id, None)
            self.db.set("AIModule", "chat_history", self.chat_history)
            self.db.set("AIModule", "chat_archive", self.chat_archive)
            await message.edit("üóëÔ∏è <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.</b>")
        else:
            await message.edit("üì≠Ô∏è <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞.</b>")

    @loader.unrestricted
    async def rolecmd(self, message):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å –¥–ª—è –ò–ò –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.role <—Ä–æ–ª—å>`
        """
        chat_id = str(message.chat_id)
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("üé≠ <b>–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ò–ò.</b>")
            return

        self.role[chat_id] = args
        self.db.set("AIModule", "role", self.role)
        await message.edit(f"üé≠ <b>–†–æ–ª—å –ò–ò —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:</b> {args}")


    @loader.unrestricted
    async def createplugincmd(self, message):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.createplugin <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è>`
        """
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("ü§î <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞.</b>")
            return

        try:
            name, role = args.split(" ", 1)
        except ValueError:
            await message.edit("ü§î <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .createplugin <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è></b>")
            return

        if 'global' not in personas:
            personas['global'] = {}
        personas['global'][name] = role
        save_personas(personas)
        await message.edit(f"‚úÖ <b>–ü–ª–∞–≥–∏–Ω ' {name} ' —Å–æ–∑–¥–∞–Ω.</b>")

    @loader.unrestricted
    async def pluginscmd(self, message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤.
        """
        if 'global' not in personas or not personas['global']:
            await message.edit("ü§î <b>–°–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ –ø—É—Å—Ç.</b>")
            return

        persona_list = "\n".join([f"<b>{name}:</b> {role}" for name, role in personas['global'].items()])
        await message.edit(f"üß© <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:</b>\n{persona_list}\n\n–ê –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ–ª—å—à–µ, –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ç–æ–∂–µ)")

    @loader.unrestricted
    async def switchplugincmd(self, message):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.switchplugin <–Ω–∞–∑–≤–∞–Ω–∏–µ>`
        """
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("ü§î <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞.</b>")
            return

        if 'global' not in personas or args not in personas['global']:
            await message.edit("üö´ <b>–ü–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
            return

        chat_id = str(message.chat_id)
        self.role[chat_id] = personas['global'][args]
        await message.edit(f"‚úÖ <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø–ª–∞–≥–∏–Ω:</b> {args}")

    @loader.unrestricted
    async def deleteplugincmd(self, message):
        """
        –£–¥–∞–ª—è–µ—Ç –ø–ª–∞–≥–∏–Ω.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.deleteplugin <–ù–∞–∑–≤–∞–Ω–∏–µ>`
        """
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("ü§î <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞.</b>")
            return

        if 'global' not in personas or args not in personas['global']:
            await message.edit("üö´ <b>–ü–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
            return

        del personas['global'][args]
        save_personas(personas)
        await message.edit(f"‚úÖ <b>–ü–ª–∞–≥–∏–Ω ' {args} ' —É–¥–∞–ª–µ–Ω.</b>")

    @loader.unrestricted
    async def aicmd(self, message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ò–ò.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.ai <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.ai`
        """
        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)
        request_text = ""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if reply:
            if reply.voice:
                request_text = await self.handle_voice_message(voice_message=reply, status_message=message)
                if not request_text: return
                if args:
                    request_text = f'"{request_text}"\n\n{args}'
            elif reply.text:
                request_text = reply.raw_text
                if args:
                    request_text = f'"{request_text}"\n\n{args}'
            else:
                request_text = args
        elif args:
            request_text = args
        else:
            await message.edit("ü§î <b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–∫–ª—é—á–∞—è –≥–æ–ª–æ—Å–æ–≤–æ–µ).</b>")
            return
        
        if request_text:
            await self.standart_process_request(message, request_text)


    async def standart_process_request(self, message, request_text):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –º–æ–¥–µ–ª–∏ –ò–ò –¥–ª—è .aicmd.
        """
        chat_id = str(message.chat_id)
        current_role = self.role.get(chat_id, ".")

        if self.edit_promt == "on":
            await message.edit('<b>–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞...</b>')
            request_text = await self.t9_promt(message, request_text)
        
        await message.edit("ü§î <b>–î—É–º–∞—é...</b>")
        answer = await self.send_request_to_api(message, current_role, request_text, model=self.default_model)

        if answer:
            if self.humanmode == 'on':
                formatted_answer = f"{answer}"
            elif self.edit_promt == "on":
                formatted_answer = f"‚ùî <b>–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é –ò–ò:</b>\n`{request_text}`\n\nüí° <b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ {self.default_model}:</b>\n{answer}"
            else:
                formatted_answer = f"‚ùî <b>–ó–∞–ø—Ä–æ—Å:</b>\n`{request_text}`\n\nüí° <b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ {self.default_model}:</b>\n{answer}"
            await message.edit(formatted_answer)

    async def respond_to_message(self, message, user_name, question):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏.
        """
        chat_id = str(message.chat_id)

        if chat_id not in self.chat_history:
            self.chat_history[chat_id] = []

        original_question = question
        if self.edit_promt == "on":
            question = await self.t9_promt(message, question, self.chat_history[chat_id])

        if question != original_question and message.out:
            try:
                await message.edit(question)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –≤–æ–ø—Ä–æ—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.chat_history[chat_id].append({
            "role": "user",
            "content": f"{user_name} –Ω–∞–ø–∏—Å–∞–ª: {question}"
        })

        if len(self.chat_history[chat_id]) > 1000:
            self.chat_history[chat_id] = self.chat_history[chat_id][-1000:]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è API
        history_for_api = [
            {"role": "system", "content": self.role.get(chat_id, "")}
        ] + self.chat_history[chat_id]

        try:
            answer = await self.send_request_to_api(message, "", "", history_list=history_for_api)
            
            if answer:
                self.chat_history[chat_id].append({"role": "assistant", "content": answer})
                self.db.set("AIModule", "chat_history", self.chat_history)
                
                if self.humanmode == 'on':
                    await message.reply(answer)
                else:
                    await message.reply(f"<b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ {self.default_model}:</b>\n{answer}")
            else: # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API, —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
                self.chat_history[chat_id].pop()

        except Exception as e:
            await message.reply(f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:</b> {e}")
            self.chat_history[chat_id].pop()
            
    async def is_reply_to_bot(self, message):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞.
        """
        if message.is_reply:
            reply_to_message = await message.get_reply_message()
            if reply_to_message and reply_to_message.sender_id == (await self.client.get_me()).id:
                return True
        return False


    async def get_user_name(self, message):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        if message.sender:
            user = await self.client.get_entity(message.sender_id)
            return user.first_name or user.username
        else:
            return "–ê–Ω–æ–Ω–∏–º"

    # ... –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (aicreate, rewrite, moduleinfo, fastzetta –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    @loader.unrestricted
    async def aisupcmd(self, message):
        """
        –°–ø—Ä–æ—Å–∏—Ç—å —É AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è Hikka.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.aisup <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.aisup`
        """
        r = "sup"
        await self.process_request(message, self.instructions, r)


    async def allmodule(self, answer, message, request_text):
        rewrite2 = self.get_allmodule_instruction()
        await message.edit("<b>üé≠–¶–µ–ø–æ—á–∫–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:\nüü¢–ü–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—è–ª–∞ —Ä–µ—à–µ–Ω–∏–µ\nüü¢–í—Ç–æ—Ä–∞—è –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—è–ª–∞ —Ä–µ—à–µ–Ω–∏–µ.\nüí≠–¢—Ä–µ—Ç—å—è –º–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç...</b>\n\n–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ: –∫–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–π –¥–∞—Ç–∞ —Å–µ—Ç. –ò —Å–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–¥–µ–ª–∏ —Å —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏.")
        answer = await self.send_request_to_api(message, rewrite2, f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request_text}\n–û—Ç–≤–µ—Ç –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –º–æ–¥—É–ª—è:{answer}")
        if answer:
            await self.allmodule2(answer, message, request_text)

    async def modulecreating(self, answer, message, request_text):
        rewrite = self.get_module_instruction2()
        await message.edit("<b>üé≠–°–æ–∑–¥–∞–µ—Ç—Å—è –º–æ–¥—É–ª—å:\nüü¢–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞\nüí≠–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...</b>\n\n–ó–∞–º–µ—Ç–∫–∞: —á–µ–º –ª—É—á—à–µ –≤—ã —Ä–∞—Å—Å–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–¥–µ–ª–∏ - —Ç–µ–º –ª—É—á—à–µ –æ–Ω–∞ —Å–æ–∑–¥–∞—Å—Ç –º–æ–¥—É–ª—å. ")
        answer = await self.send_request_to_api(message, rewrite, f"User request: {request_text}\nAnswer to the first part of the module:{answer}")
        if answer:
            await self.modulecreating2(answer, message, request_text)

    async def allmodule2(self, answer, message, request_text):
        rewrite3 = self.get_allmodule_instruction2()
        await message.edit("<b>üé≠–¶–µ–ø–æ—á–∫–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:\nüü¢–ü–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—è–ª–∞ —Ä–µ—à–µ–Ω–∏–µ\nüü¢–í—Ç–æ—Ä–∞—è –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—è–ª–∞ —Ä–µ—à–µ–Ω–∏–µ.\nüü¢–¢—Ä–µ—Ç—å—è –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—è–ª–∞ —Ä–µ—à–µ–Ω–∏–µ\nüí≠–ß–µ—Ç–≤–µ—Ä—Ç–∞—è –º–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç...</b>\n\n–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ: –∫–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–π –¥–∞—Ç–∞ —Å–µ—Ç. –ò —Å–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–¥–µ–ª–∏ —Å —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏.")
        answer = await self.send_request_to_api(message, rewrite3, f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request_text}\n–û—Ç–≤–µ—Ç —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏ –º–æ–¥—É–ª—è:{answer}")
        if answer:
            formatted_answer = f"‚ùî –ó–∞–ø—Ä–æ—Å:\n`{request_text}`\n\nüí° <b>–û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ Hikka</b>:\n{answer}"
            await message.edit(formatted_answer)

    async def modulecreating2(self, answer, message, request_text):
        rewrite = self.get_module_instruction3()
        await message.edit("<b>üé≠–°–æ–∑–¥–∞–µ—Ç—Å—è –º–æ–¥—É–ª—å:\nüü¢–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞\nüü¢–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ\nüí≠–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç—å –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...</b>\n\n–ï—â–µ –∑–∞–º–µ—Ç–∫–∞: –õ—É—á—à–µ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å.")
        answer = await self.send_request_to_api(message, rewrite, f"User request: {request_text}\nAnswer to the first part of the module:{answer}")
        if answer:
            try:
                if len(answer) > 4096:
                    await message.edit("‚ö†Ô∏è –ö–æ–¥ –º–æ–¥—É–ª—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ë—ã–ª –≤—ã—Å–ª–∞–Ω –ø—Ä–æ—Å—Ç–æ —Ñ–∞–π–ª.")
                    await self.save_and_send_code(answer, message)
                else:
                    await message.edit(f"<b>üí° –û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ Hikka | –ö—Ä–µ–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π</b>:\n{answer}")
                    await self.save_and_send_code(answer, message)
            except Exception as e:
                if "Message was too long" in str(e):
                    await message.edit("‚ö†Ô∏è –ö–æ–¥ –º–æ–¥—É–ª—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
                    await self.save_and_send_code(answer, message)
                else:
                    await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    async def rewrite_process(self, answer, message, request_text):
        rewrite = self.get_double_instruction()
        await message.edit("<b>üé≠–¶–µ–ø–æ—á–∫–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:\nüü¢–ü–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—è–ª–∞ —Ä–µ—à–µ–Ω–∏–µ\nüí≠–í—Ç–æ—Ä–∞—è –º–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç...</b>\n\n–ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ: –∫–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–π –¥–∞—Ç–∞ —Å–µ—Ç. –ò —Å–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–¥–µ–ª–∏ —Å —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏.")
        answer = await self.send_request_to_api(message, rewrite, f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request_text}\n–û—Ç–≤–µ—Ç –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –º–æ–¥—É–ª—è:{answer}")
        if answer:
            await self.allmodule(answer, message, request_text)


    @loader.unrestricted
    async def aicreatecmd(self, message):
        """
        –ü–æ–ø—Ä–æ—Å–∏—Ç—å AI –ø–æ–º–æ—â–Ω–∏–∫–∞  –¥–ª—è  Hikka –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–¥—É–ª—å.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.aicreate <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `.aicreate` """
        r = "create"
        await self.process_request(message, self.module_instructions, r)


    async def save_and_send_code(self, answer, message):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥ –≤ —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∏ —É–¥–∞–ª—è–µ—Ç."""
        try:
            code_start = answer.find("`python") + len("`python")
            code_end = answer.find("```", code_start)
            code = answer[code_start:code_end].strip()

            with open("AI-module.py", "w", "utf-8") as f:
                f.write(code)

            await message.client.send_file(
                message.chat_id,
                "AI-module.py",
                caption="<b>üí´–í–∞—à –≥–æ—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å</b>",
            )

            os.remove("AI-module.py")

        except (TypeError, IndexError, ValueError) as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–¥ –∏–∑ ```python ... ``` –±–ª–æ–∫–∞. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ —Ñ–∞–π–ª. –û—à–∏–±–∫–∞: {e}")
            try:
                with open("AI-module.txt", "w", "utf-8") as f:
                    f.write(answer)
                await message.client.send_file(message.chat_id, "AI-module.txt", caption="‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–æ–∫ –∫–æ–¥–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–µ—Å—å –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.</b>")
                os.remove("AI-module.txt")
            except Exception as e_inner:
                await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e_inner}")


    async def process_request(self, message, instructions, command):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –º–æ–¥–µ–ª–∏ –ò–ò.
        """
        request_text = ""
        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)
        
        if reply and reply.voice:
            request_text = await self.handle_voice_message(voice_message=reply, status_message=message)
            if not request_text: return
            if args:
                request_text += f"\n\n{args}"
        elif reply and reply.text:
            request_text = reply.raw_text
            if args:
                request_text += f"\n\n{args}"
        elif args:
            request_text = args
        else:
            await message.edit("ü§î –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–∫–ª—é—á–∞—è –≥–æ–ª–æ—Å–æ–≤–æ–µ).")
            return

        try:
            await message.edit("<b>ü§î –î—É–º–∞—é...</b>")
            answer = await self.send_request_to_api(message, instructions, request_text)
            if answer:
                if command == "error":
                    formatted_answer = f"üí°<b> –û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ Hikka | –°–ø–µ—Ü. –ø–æ –æ—à–∏–±–∫–∞–º</b>:\n{answer}"
                    await message.edit(formatted_answer)
                elif command == "sup":
                    if self.metod == "on":
                        await message.edit("<b>üí¨–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –Ω–∞—á–∞–ª–∏—Å—å..</b>")
                        await self.rewrite_process(answer, message, request_text)
                    else:
                        formatted_answer = f"‚ùî –ó–∞–ø—Ä–æ—Å:\n`{request_text}`\n\nüí° <b>–û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ Hikka | –†–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</b>:\n{answer}\n\n‚ùï–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –º–æ–¥–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –∑–Ω–∞–Ω–∏—è–º–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∏ –±–∞–∑–æ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ hikka"
                        await message.edit(formatted_answer)
                elif command == "create":
                    await self.modulecreating(answer, message, request_text)
                elif command == 'rewrite':
                    formatted_answer = f"‚ùî –ó–∞–ø—Ä–æ—Å:\n`{request_text}`\n\nüí° <b>–û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ Hikka</b>:\n{answer}"
                    await message.edit(formatted_answer)
                else:
                    formatted_answer = answer
                    await message.edit(formatted_answer)

        except Exception as e:
            await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    async def t9_promt(self, message, request_text, history=None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
        """
        api_url = "http://109.172.94.236:5001/OnlySq-Zetta/v1/models"
        chat_id = str(message.chat_id)

        system_prompt = (
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –£–ª—É—á—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å –µ–≥–æ –ª—É—á—à–µ –ø–æ–Ω—è–ª–∞, "
            "–æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –∏ –¥–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–ï—Å–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω—è—è –µ–≥–æ. "
            "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã —Ç–µ–±–µ, —Ç—ã –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫. –í—ã–ø–æ–ª–Ω—è–π —Å–≤–æ—é –∑–∞–¥–∞—á—É. –ó–∞–ø—Ä–æ—Å—ã '–ü—Ä–∏–≤–µ—Ç', '–ö–∞–∫ –¥–µ–ª–∞?' –∏ –ø–æ–¥–æ–±–Ω—ã–µ —Ç–æ–∂–µ –Ω–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã —Ç–µ–±–µ. –õ–∏–±–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—à—å –∑–∞–ø—Ä–æ—Å, –ª–∏–±–æ –Ω–µ –¥–µ–ª–∞–µ—à—å –Ω–∏—á–µ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç."
            "–ù–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –æ—Ç —Å–µ–±—è. –õ–∏–±–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –ª–∏–±–æ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π. –ù–µ –ø–∏—à–∏ '–Ø –∏—Å–ø—Ä–∞–≤–∏–ª —ç—Ç–æ, —ç—Ç–æ' –∏–ª–∏ '–ü—Ä–æ—à–ª—ã–π —Ç–µ–∫—Å—Ç –±—ã–ª —Ç–∞–∫–æ–π'. –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω, –Ω–µ –≤–Ω–æ—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –í–µ—Ä–Ω–∏ —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç. –û—Ç —Å–µ–±—è –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π."
        )
        user_prompt = {"role": "user", "content": f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' {request_text} '"}

        messages_for_payload = [{"role": "system", "content": system_prompt}]
        if history:
            messages_for_payload += history
        messages_for_payload.append(user_prompt)

        payload = {
            "model": self.default_model,
            "request": {"messages": messages_for_payload}
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    improved_request = data.get("answer", request_text).strip()
                    decoded_answer = base64.b64decode(improved_request).decode('utf-8')
                    return decoded_answer
        except aiohttp.ClientError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞: {e}")
            return request_text


    @loader.unrestricted
    async def aiinfocmd(self, message):
        """
        - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏‚úÖ
        """
        await message.edit('''<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 13.0:
–ò–∑–º–µ–Ω–µ–Ω–∏—è:
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞–º—è—Ç—å (–∫–æ–Ω—Ç–µ–∫—Å—Ç) –¥–ª—è FastZetta. –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥. –í–∫–ª—é—á–∏—Ç—å –º–æ–∂–Ω–æ –≤ .zettacfg
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ .fastclear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ FastZetta.
- –°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑–µ–π –¥–ª—è FastZetta –∏ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞.
- –í –∫–æ–º–∞–Ω–¥—É .mode –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã: random (—Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞) –∏ friends (–æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è–º –∏ –≤–∞–º).
- –û–±—â–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–ª–∫–∏—Ö –æ—à–∏–±–æ–∫.

—Å–æ–≤–µ—Ç—É–µ–º –∫–æ–º–∞–Ω–¥—É .moduleinfo –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ.

üîó–¢–≥ –∫–∞–Ω–∞–ª –º–æ–¥—É–ª—è: [https://t.me/hikkagpt](https://t.me/hikkagpt)</b>''')


    @loader.unrestricted
    async def aiprovcmd(self, message):
        """
        - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—ÖüîÜ
        """
        await message.edit('''<b>üü£OnlySq-Zetta AI: –°—Ç–∞–±–∏–ª—å–Ω—ã–π, –±—ã—Å—Ç—Ä–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞. –ë–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ OnlySq –∏ —Ö–æ—Å—Ç–∏—Ç—Å—è –Ω–∞ –∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö. –ò—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–º - –∫–∞–Ω–∞–ª: @OnlySq

üî∏devj: –ë—ã—Å—Ç—Ä–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞, –ù–µ —Å—Ç–∞–±–∏–ª–µ–Ω –∏–∑ –∑–∞ —Ä–∞–∑–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.</b>''')


    @loader.unrestricted
    async def rewritecmd(self, message):
        """–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .rewrite <–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è.</b>")
            return

        if not message.is_reply:
            await utils.answer(message, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å.</b>")
            return

        reply_message = await message.get_reply_message()
        original_text = reply_message.text

        if not original_text:
            await utils.answer(message, "<b>–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è.</b>")
            return

        instruction = args
        await message.edit('<b>üí≠–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é..</b>')
        answer = await self.send_request_to_api(
            message,
            "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –æ—Ç–≤–µ—á–∞—Ç—å —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–µ –≤—ã—Ö–æ–¥—è –∑–∞ —Ä–∞–º–∫–∏ —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Latex –∏–ª–∏ –æ—Å–æ–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Å—Ç—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º.",
            f"{instruction}: {original_text}"
        )

        if answer:
            formatted_answer = f"‚úèÔ∏è <b>–ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª—å—é {self.default_model}:</b>\n{answer}"
            await message.edit(formatted_answer)


    @loader.unrestricted
    async def moduleinfocmd(self, message):
        """
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.
        """
        info_text = """
        <b>üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

<b>üìå –ê–≤—Ç–æ—Ä:</b>@procot1
üåê <b>–ú–æ–¥—É–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Zetta - AI models.</b>
üìñ –í–µ—Å—å –µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–æ–∂–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞: <a href="https://t.me/ZettaGPT4o_bot">@ZettaGPT4o_bot</a>.

---

<b>üî• –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è:</b>
üíº <i>–û–±—ä–µ–¥–∏–Ω—ë–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª 3 —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π!</i>
–≠—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ <b>—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º</b>, <b>–ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º</b> –∏ <b>—É–¥–æ–±–Ω—ã–º</b>.
<b>–í—Å–µ –ª—É—á—à–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—Ä–∞–Ω—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.</b>

---

<b>üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è:</b>
1Ô∏è‚É£ <b>–ü–æ–∏—Å–∫ –∫–∞–∫ –≤ Google.</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è <i>–±—ã—Å—Ç—Ä–æ–≥–æ –∏ —Ç–æ—á–Ω–æ–≥–æ</i> –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

2Ô∏è‚É£ <b>–ß–∞—Ç —Å –º–æ–¥–µ–ª—å—é –ò–ò.</b>
- –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥ –≤ –ª—é–±–æ–º —á–∞—Ç–µ.
- –ò–ò —Ä–∞–∑–ª–∏—á–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–µ—Ä–µ–¥–∞—á–µ <i>–Ω–∏–∫–æ–≤</i>.
- –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º <i>—É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≤–∞—à–∏—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π.</i>
- –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

3Ô∏è‚É£ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤.</b>
- –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–ª–∏ –¥–∞–π—Ç–µ –º–æ–¥–µ–ª–∏ –ò–ò –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ –±—ã –æ–Ω–∞ –ª—É—á—à–µ –¥–∞–≤–∞–ª–∞ –æ—Ç–≤–µ—Ç—ã.
- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ <i>–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã</i> –≤–µ–¥—å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤.
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>.switchplugin</code> –¥–ª—è <i>–º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è</i> –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.

4Ô∏è‚É£ <b>–í—ã–±–æ—Ä –¥–æ 35 –º–æ–¥–µ–ª–µ–π –ò–ò.</b>
–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏.

5Ô∏è‚É£ <b>–ó–∞–ø—Ä–æ—Å—ã –¥–ª—è Hikka Userbot.</b>
- –ö–æ–º–∞–Ω–¥—ã <code>aisup</code>/<code>aicreate</code> –ø–æ–º–æ–≥—É—Ç:
    üîπ –£–∑–Ω–∞—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ Hikka Userbot.
    üîπ –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É Hikka Userbot
    üîπ –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å –º–æ–¥—É–ª—å –¥–ª—è Hikka Userbot

6Ô∏è‚É£ <b>–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ (<code>.rewrite</code>):</b>
- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.
- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞.
- –£–ø—Ä–æ—â–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫.

7Ô∏è‚É£ <b>–ë—ã—Å—Ç—Ä—ã–π –≤—ã–∑–æ–≤ –∑–µ—Ç—Ç—ã:</b>
–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ .fastzetta on, –∏ –≤—ã–∑—ã–≤–∞–π—Ç–µ –∑–µ—Ç—Ç—É –ø–æ –∏–º–µ–Ω–∏:
- –ó–µ—Ç—Ç–∞, –∫–∞–∫–æ–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞?
–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã, –ª–∏–±–æ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º.

---

<b>üí° –ü–æ—á–µ–º—É —ç—Ç–æ—Ç –º–æ–¥—É–ª—å —É–Ω–∏–∫–∞–ª–µ–Ω?</b>
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–¥—É–ª—è <i>–æ–≥—Ä–æ–º–µ–Ω.</i>
–û—Å–≤–æ–∏–≤ –µ–≥–æ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ò–ò –Ω–∞ <b>–º–∞–∫—Å–∏–º—É–º.</b>

---

üì¢ <b>–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–∞–∂–Ω–æ–µ!</b>
üîó –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: <a href="https://t.me/hikkagpt">@hikkagpt</a>

‚ú® <b>–†–∞—Å–∫—Ä–æ–π—Ç–µ –≤–µ—Å—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª Zetta - AI models —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!</b>
        """
        await message.edit(info_text, link_preview=False)

    @loader.unrestricted
    async def fastzettacmd(self, message):
        """
        –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º "FastZetta" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.
        """
        chat_id = str(message.chat_id)
        if self.fastzetta_active_chats.get(chat_id):
            self.fastzetta_active_chats.pop(chat_id, None)
            status_text = "–≤—ã–∫–ª—é—á–µ–Ω"
        else:
            self.fastzetta_active_chats[chat_id] = True
            status_text = "–≤–∫–ª—é—á–µ–Ω"
        self.db.set("AIModule", "fastzetta_active_chats", self.fastzetta_active_chats)

        if self.fastzetta_active_chats.get(chat_id):
            await message.edit(f"‚ö°Ô∏è <b>–†–µ–∂–∏–º FastZetta {status_text} –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.</b> \n\n–ü—Ä–æ—Å—Ç–æ –ø–æ–∑–æ–≤–∏ –º–µ–Ω—è –ø–æ –∏–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ' <b>{self.fastzetta_trigger_word}</b> ', –∏ —è –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n\n<b>–ò–º—è –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å: .namezetta <–ù–æ–≤–æ–µ –∏–º—è></b>")
        else:
            await message.edit(f"üõë <b>–†–µ–∂–∏–º FastZetta {status_text} –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.</b>")

    @loader.unrestricted
    async def namezettacmd(self, message):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ FastZetta.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .namezetta <–Ω–æ–≤–æ–µ_—Å–ª–æ–≤–æ>
        """
        args = utils.get_args_raw(message)
        if not args:
            await message.edit(f"ü§î <b>–£–∫–∞–∂–∏ –Ω–æ–≤–æ–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ. –¢–µ–∫—É—â–µ–µ: '{self.fastzetta_trigger_word}'</b>")
            return

        self.fastzetta_trigger_word = args.strip()
        self.db.set("AIModule", "fastzetta_trigger_word", self.fastzetta_trigger_word)
        await message.edit(f"‚úÖ <b>–¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è FastZetta –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: '{self.fastzetta_trigger_word}'</b>")

    @loader.unrestricted
    async def friendzettacmd(self, message):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ FastZetta.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .friendzetta <@username/ID> –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        user = None

        if args:
            try:
                user = await self.client.get_entity(args)
            except (ValueError, TypeError):
                await utils.answer(message, "üö´ <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>")
                return
        elif reply:
            user = await reply.get_sender()
        else:
            await utils.answer(message, "ü§î <b>–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @username/ID –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>")
            return

        if not user:
            await utils.answer(message, "üö´ <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>")
            return

        if user.id in [f['id'] for f in self.fastzetta_friends]:
            await utils.answer(message, f"‚úÖ <b>{user.first_name}</b> —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π.")
            return

        self.fastzetta_friends.append({"id": user.id, "name": user.first_name})
        self.db.set("AIModule", "fastzetta_friends", self.fastzetta_friends)
        await utils.answer(message, f"ü´Ç <b>{user.first_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –≤ –¥—Ä—É–∑—å—è Zetta!")

    @loader.unrestricted
    async def friendszettacmd(self, message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π Zetta.
        """
        text = "ü´Ç <b>–í–∞—à–∏ –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à—É fastzetta:</b>"
        buttons = []
        if not self.fastzetta_friends:
            text = "ü§∑ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π Zetta.</b>"
        else:
            buttons = [
                [{"text": friend['name'], "callback": self._confirm_delete_friend, "args": (friend['id'],)}]
                for friend in self.fastzetta_friends
            ]

        await self.inline.form(
            text=text,
            message=message,
            reply_markup=buttons
        )

    async def _show_friends_list(self, call):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤).
        """
        text = "ü´Ç <b>–í–∞—à–∏ –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à—É fastzetta:</b>"
        buttons = []
        if not self.fastzetta_friends:
            text = "ü§∑ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π Zetta.</b>"
        else:
            buttons = [
                [{"text": friend['name'], "callback": self._confirm_delete_friend, "args": (friend['id'],)}]
                for friend in self.fastzetta_friends
            ]
        
        await call.edit(text, reply_markup=buttons)


    async def _confirm_delete_friend(self, call, user_id):
        friend_name = next((f['name'] for f in self.fastzetta_friends if f['id'] == user_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        text = f"‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {friend_name} –∏–∑ –¥—Ä—É–∑–µ–π Zetta?</b>"
        buttons = [
            [
                {"text": "‚ùå –£–¥–∞–ª–∏—Ç—å", "callback": self._delete_friend, "args": (user_id,)},
                {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self._back_to_friends_list}
            ]
        ]
        await call.edit(text, reply_markup=buttons)

    async def _delete_friend(self, call, user_id):
        friend_name = next((f['name'] for f in self.fastzetta_friends if f['id'] == user_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        self.fastzetta_friends = [f for f in self.fastzetta_friends if f['id'] != user_id]
        self.db.set("AIModule", "fastzetta_friends", self.fastzetta_friends)
        await self._show_friends_list(call)

    async def _back_to_friends_list(self, call):
        await self._show_friends_list(call)
