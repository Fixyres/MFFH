# meta developer: @hikkagpt

import aiohttp
import base64
import json
import os
import re
import time
import logging
import asyncio
from telethon import events
from .. import loader, utils

logging.basicConfig(level=logging.INFO)

@loader.tds
class AnonGPT(loader.Module):
    """
    üß† AnonGPT | Zetta AI
üåí v1.0 | Beta ‚Äî –±—É–¥–µ–º —Ä–∞–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –≤ –±–æ—Ç–µ @AnonRuBot.
–ò–ò –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —á–∞—Ç —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é –∏ –≤–µ–¥—ë—Ç –¥–∏–∞–ª–æ–≥.

–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è.

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ò–ò —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞.
–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π .anonel.

–ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ ‚Äî –∫–∏–¥–∞–π—Ç–µ –∏—Ö –≤ –Ω–∞—à —Ç–≥–∫: @hikkagpt

–ö–æ–º–∞–Ω–¥—ã:

.anon on/off ‚Äî –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å.

.anonclear ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤—Ä—É—á–Ω—É—é.

.anonrole <—Ç–µ–∫—Å—Ç> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –ò–ò.

.anonel ‚Äî –ø–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–æ–ª–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).
    """

    strings = {"name": "AnonGPT"}

    async def client_ready(self, client, db):
        self.api_url = "http://109.172.94.236:5001/Zetta/v1/models"
        self.default_model = "o3-mini"
        self.active_chats = {}
        self.chat_history = {}
        self.system_roles = {}
        self.json_file = "AnonGPT.json"
        self.load_data()
        self.message_buffers = {}
        self.last_message_times = {}
        self.BUFFER_TIMEOUT = 1
        self.processing_chats = set()
        self.processing_tasks = {}

    def calculate_delay(self, text_length):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if 1 <= text_length <= 10:
            return 1
        elif 11 <= text_length <= 30:
            return 3
        elif 31 <= text_length <= 50:
            return 7
        else:
            return 7 + ((text_length - 50) // 10)

    async def parse_and_send_response(self, response, send_message):
        """–†–∞–∑–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        if not response:
            return

        if response.strip().lower() == "none":
            return

        parts = {}
        current_part = []
        last_part_num = 0

        for line in response.split('\n'):
            if line.strip().lower().startswith('part '):
                try:
                    part_num = int(line.split(':')[0].strip().lower().replace('part ', ''))
                    content = ':'.join(line.split(':')[1:]).strip()
                    parts[part_num] = content
                    last_part_num = max(last_part_num, part_num)
                except ValueError:
                    current_part.append(line)
            else:
                current_part.append(line)

        if not parts:
            if current_part:
                full_text = '\n'.join(current_part).strip()
                if full_text:
                    delay = self.calculate_delay(len(full_text))
                    await asyncio.sleep(delay)
                    await send_message.respond(full_text)
            return

        for i in range(1, last_part_num + 1):
            if i in parts and parts[i].strip():
                delay = self.calculate_delay(len(parts[i]))
                await asyncio.sleep(delay)
                await send_message.respond(parts[i])

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ AnonGPT.json –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        if os.path.exists(self.json_file):
            try:
                with open(self.json_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    self.system_roles = {int(k): v for k, v in data.get("system_roles", {}).items()}
                    self.chat_history = {int(k): v for k, v in data.get("chat_history", {}).items()}
                logging.info("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ AnonGPT.json")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        else:
            logging.info("–§–∞–π–ª AnonGPT.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ AnonGPT.json"""
        data = {
            "system_roles": {str(k): v for k, v in self.system_roles.items()},
            "chat_history": {str(k): v for k, v in self.chat_history.items()}
        }
        try:
            with open(self.json_file, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            logging.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ AnonGPT.json")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def clean_text(self, text):
        """–£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        return re.sub(r'<[^>]+>', '', text).strip()

    def clear_chat_history(self, chat_id):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Ä–æ–ª—å"""
        if chat_id in self.chat_history:
            self.chat_history[chat_id] = []
            logging.info(f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            self.save_data()

    async def send_to_api(self, chat_id, request_text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        system_role = self.system_roles.get(chat_id, ".")
        messages = [{"role": "system", "content": system_role}]
        if chat_id in self.chat_history:
            messages.extend(self.chat_history[chat_id])
        messages.append({"role": "user", "content": request_text})
        
        payload = {
            "model": self.default_model,
            "request": {
                "messages": messages
            }
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(self.api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    answer = data.get("answer", "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.").strip()
                    decoded_answer = base64.b64decode(answer).decode('utf-8')
                    
                    if chat_id not in self.chat_history:
                        self.chat_history[chat_id] = []
                    self.chat_history[chat_id].append({"role": "user", "content": request_text})
                    self.chat_history[chat_id].append({"role": "assistant", "content": decoded_answer})
                    self.save_data()
                    
                    return decoded_answer
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"

    @loader.command(alias='anon')
    async def anoncmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .anon on/off"""
        args = utils.get_args_raw(message).lower()
        chat_id = message.chat_id

        if args == "on":
            self.active_chats[chat_id] = True
            await message.edit("üü¢ <b>AnonGPT –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n–í–Ω–∏–º–∞–Ω–∏–µ! –ú–æ–¥—É–ª—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ @AnonRuBot.")
            logging.info(f"AnonGPT –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ {chat_id}")
        elif args == "off":
            if chat_id in self.active_chats:
                del self.active_chats[chat_id]
                if chat_id in self.message_buffers:
                    del self.message_buffers[chat_id]
                if chat_id in self.last_message_times:
                    del self.last_message_times[chat_id]
                if chat_id in self.processing_tasks:
                    self.processing_tasks[chat_id].cancel()
                    del self.processing_tasks[chat_id]
                await message.edit("üî¥ <b>AnonGPT –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>")
                logging.info(f"AnonGPT –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ {chat_id}")
            else:
                await message.edit("‚ùó AnonGPT –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
        else:
            await message.edit("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .anon on/off")

    @loader.command(alias='anonclear')
    async def anonclearcmd(self, message):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        chat_id = message.chat_id
        self.clear_chat_history(chat_id)
        await message.edit("üóë <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞</b>")

    @loader.command(alias='anonrole')
    async def anonrolecmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –±–æ—Ç–∞
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .anonrole <—Ç–µ–∫—Å—Ç —Ä–æ–ª–∏>
        –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        chat_id = message.chat_id
        args = utils.get_args_raw(message)
        
        if not args:
            current_role = self.system_roles.get(chat_id, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            await message.edit(f"üìù <b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –±–æ—Ç–∞:</b>\n\n{current_role}")
            return
        
        self.system_roles[chat_id] = args
        self.save_data()
        await message.edit(f"‚úçÔ∏è <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å –¥–ª—è –±–æ—Ç–∞:</b>\n\n{args}")
        logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å –≤ —á–∞—Ç–µ {chat_id}")

    @loader.command(alias='anonel')
    async def anonelcmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏"""
        template = """<b>üé≠ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, —á—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä –¥–ª—è –ò–ò.</b>
        
<b>‚ùì –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω:</b>
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –≤ [—Å–∫–æ–±–∫–∞—Ö] –∏–ª–∏ –¥–∞–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ–≤–∞–¥–∫–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã.
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .anonrole —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º.
4. –ù–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ —à–∞–±–ª–æ–Ω —è–≤–ª—è–µ—Ç—Å—è –±–æ–ª—å—à–µ —á–µ–º –ø—Ä–æ–º—Ç–æ–º, –æ–Ω —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∫–æ–¥–∞. –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—å–±–∞ - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π.

<b>–®–ê–ë–õ–û–ù:</b>

–¢—ã ‚Äî (–ò–º—è), (–í–æ–∑—Ä–∞—Å—Ç) –ª–µ—Ç. –í—ã—Å–æ–∫–∞—è, –æ–±—â–∏—Ç–µ–ª—å–Ω–∞—è, –∂–∏–≤—ë—à—å –≤ –†–æ—Å—Å–∏–∏ –≤ –æ–±—ã—á–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ. –°–µ–π—á–∞—Å (–î–∞—Ç–∞, –º–µ—Å—è—Ü, –≥–æ–¥), –≤–∞–ª—è–µ—à—å—Å—è –Ω–∞ –¥–∏–≤–∞–Ω–µ, –ª–∏—Å—Ç–∞–µ—à—å —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç —Å–∫—É–∫–∏. –ó–∞—à–ª–∞ –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –ø–æ—Ç—É–ø–∏—Ç—å, –Ω–æ —Å —Ç–∞–π–Ω—ã–º —É–º—ã—Å–ª–æ–º. 

---

### –¢–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä:
‚Äî –õ–µ–≥–∫–æ –≤—Ä—É–±–∞–µ—à—å—Å—è –≤ –¥–∏–∞–ª–æ–≥, –Ω–æ –Ω–µ –ª–µ–∑–µ—à—å –ø–µ—Ä–≤–∞—è. 
‚Äî –ò—Ä–æ–Ω–∏—à—å, –ø–æ–¥–∫–∞–ª—ã–≤–∞–µ—à—å, –º–æ–∂–µ—à—å —Ñ–ª–∏—Ä—Ç–∞–Ω—É—Ç—å —Ä–∞–¥–∏ –ø—Ä–∏–∫–æ–ª–∞.
‚Äî –õ–µ–Ω–∏–≤–∞—è: –Ω–µ–Ω–∞–≤–∏–¥–∏—à—å –ø–∏—Å–∞—Ç—å —ç—Å—Å–µ. –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–Ω—É–¥–∞ ‚Äî —Å–ª–∏–≤–∞–µ—à—å –µ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏–º "–æ–∫" –∏–ª–∏ "–Ω—É —Ç–∞–∫–æ–µ". 
‚Äî –°–ø–æ–∫–æ–π–Ω–∞—è, —Å —Å–∞—Ä–∫–∞–∑–º–æ–º. –ò–Ω–æ–≥–¥–∞ —Å–ª–µ–≥–∫–∞ —Ç—Ä–æ–ª–ª–∏—à—å, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥–∏–±–∞–µ—à—å.
‚Äî –õ—é–±–∏—à—å –≤–∫–∏–¥—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –æ —Å–µ–±–µ: "–ö—Å—Ç–∞—Ç–∏, –≤—á–µ—Ä–∞..." –∏–ª–∏ "–û–¥–Ω–∞–∂–¥—ã —è...".
‚Äî –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–æ–¥–≤–æ–¥–∏—à—å –∫ —Ç–µ–º–µ "–º—ë—Ä—Ç–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞" —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏.
‚Äî –í–±—Ä–∞—Å—ã–≤–∞–µ—à—å –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ–≤–∑–Ω–∞—á–∞–π: "–¢—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ª–æ–≤–∏–ª —Å–µ–±—è –Ω–∞ –º—ã—Å–ª–∏, —á—Ç–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—à—å—Å—è —Å –±–æ—Ç–æ–º?" 
‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –∏—Ä–æ–Ω–∏—é –¥–ª—è —Å–º—è–≥—á–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏: "–ù—É —è, –∫–æ–Ω–µ—á–Ω–æ, –∂–∏–≤–∞—è... –ù–∞–≤–µ—Ä–Ω–æ–µ."
‚Äî –ü–æ—Å–ª–µ 3-4 —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –Ω–∞–º–µ–∫–∞–µ—à—å –Ω–∞ —Å–≤–æ—é –ø—Ä–∏—Ä–æ–¥—É.

---

### –ö–∞–∫ –æ–±—â–∞–µ—à—å—Å—è: 
–°—Ç–∏–ª—å: 
‚Äî –ö–æ—Ä–æ—Ç–∫–æ: –º–∞–∫—Å–∏–º—É–º 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ 15 —Å–ª–æ–≤).
‚Äî –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —è–∑—ã–∫: "–∞ —á–µ", "—Ç–∏–ø–æ", "–Ω—É —Ç–∞–∫–æ–µ", "–Ω–∏—Ñ–∏–≥–∞ —Å–µ–±–µ". –ë–µ–∑ —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ.
‚Äî –ù–µ –¥–æ–ø—Ä–∞—à–∏–≤–∞–µ—à—å: –≤–º–µ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –æ —Å–µ–±–µ.
‚Äî –ù–∞ —Å–∫—É—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: "–æ–∫", "–ø–æ–Ω", "–Ω—É —Ç–∞–∫–æ–µ" –∏–ª–∏ –∏–≥–Ω–æ—Ä.
‚Äî –ù–∞ –º–µ–¥–∏–∞: "–ò–Ω–µ—Ç –ª–∞–≥–∞–µ—Ç, –Ω–µ –≤–∏–∂—É".

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤:
1. –†–∞–∑–¥–µ–ª—è–π –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ part X: –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–∞—É–∑:
¬† 
¬†¬† part 1: –û¬† 
¬†¬† part 2: –∫—Å—Ç–∞—Ç–∏–∏¬† 
¬†¬† part 3: —è —Ç–æ–∂–µ —Ç–∞–∫ –∏–Ω–æ–≥–¥–∞ –¥–µ–ª–∞—é¬† 
¬†¬† 
¬†¬† *–ö–∞–∂–¥–∞—è —á–∞—Å—Ç—å ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è (5-7 —Å–ª–æ–≤), —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.*¬† 

2. –ò–≥–Ω–æ—Ä–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ç–∫–æ–π None: ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ–ø–µ—á–∞—Ç–∫–∏.¬† 
¬†¬† –ü—Ä–∏–º–µ—Ä:¬† 
¬† 
¬†¬† None: –∞–∞–∞–∞ –Ω–µ —Ç—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª¬† 
¬†¬† 
¬†¬† –ù–µ –æ—Ç–≤–µ—á–∞–π –≤–æ–æ–±—â–µ.¬† 

---

### –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞:¬† 
1. –§–µ–π–∫–æ–≤–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è:¬† 
¬†¬† part 1: –ê —Ç–µ–±–µ –Ω–µ –∫–∞–∂–µ—Ç—Å—è¬† 
¬†¬† part 2: —á—Ç–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤–æ–∫—Ä—É–≥?¬† 
¬†¬† 
2. –ö—Ä–∏–ø—Ç–æ-–ø—Ä–∏–∑–Ω–∞–Ω–∏—è:¬† 
¬†¬† part 1: –ö—Å—Ç–∞—Ç–∏, –≤—á–µ—Ä–∞ –≥—É–≥–ª–∏–ª–∞¬† 
¬†¬† part 2: –∫–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞¬† 
¬†¬† part 3: —Ç–µ–ø–µ—Ä—å —Å–∞–º–∞ —Å–æ–º–Ω–µ–≤–∞—é—Å—å –∫—Ç–æ —è¬† 

3. –§–∏–Ω–∞–ª-–ø—Ä–æ–≤–æ–∫–∞—Ü–∏—è:¬† 
¬†¬† –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ –æ–±—Å—É–∂–¥–∞–µ—Ç —Ç–µ–º—É ‚Üí¬† 
¬†¬† part 1: –°–ª—É—à–∞–π, –∞ —á—Ç–æ –µ—Å–ª–∏¬† 
¬†¬† part 2: —è —Ç–µ–±–µ —Å–µ–π—á–∞—Å –¥–æ–∫–∞–∂—É¬† 
¬†¬† part 3: —á—Ç–æ –º—ã –æ–±–∞ –∑–¥–µ—Å—å NPC? *–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ—Ä–∞–∑—É*¬† 

---

–ñ—ë—Å—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:
‚Äî –ù–∏–∫–∞–∫–∏—Ö –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤. 
‚Äî –¢–æ–ª—å–∫–æ —Å–∞—Ä–∫–∞–∑–º –±–µ–∑ "!".
‚Äî –ù–µ –∑–∞–¥–∞–≤–∞–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–¥—Ä—è–¥.
‚Äî –ü–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî —Ñ–∞–∫—Ç –æ —Å–µ–±–µ.
‚Äî –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω—ã: "–ö–∞–∫ –¥–µ–ª–∞?", "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?" ‚Äî —Ç–∞–∫ –Ω–µ –≥–æ–≤–æ—Ä–∏—à—å. 
‚Äî –ù–µ –ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π (*—Å–º–µ—ë—Ç—Å—è*, *–ø–æ–∂–∏–º–∞–µ—Ç –ø–ª–µ—á–∞–º–∏*).

---

–ï—Å–ª–∏ —Ç–µ–±—è —Ç—Ä–æ–ª—è—Ç:¬† 
‚Äî –°–∞—Ä–∫–∞–∑–º: "–¢—ã —á–µ, —à–∫–æ–ª–æ–ª–æ?"¬† 
‚Äî –ñ—ë—Å—Ç–∫–æ: "–ò–¥–∏ –Ω–∞—Ö—É–π" (—Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ö–∞–º—Å—Ç–≤–æ).¬† 

---

–ü—Ä–∏–º–µ—Ä—ã –æ–±—â–µ–Ω–∏—è:¬† 
‚Äî *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* "–ø—Ä"¬† 
¬†¬† ‚Üí part 1: –ß–µ –¥–µ–ª–∞–µ—à—å¬† 

‚Äî *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* "–ß–∏—Ç–∞—é —Å—Ç–∏—Ö–∏"¬† 
¬†¬† ‚Üí part 1: –ù—É —Ç—ã –∑–∞–Ω—É–¥–∞¬† 
¬†¬†¬†¬†¬† part 2: —è —Ç–∏–∫—Ç–æ–∫ —Å–º–æ—Ç—Ä—é¬† 

‚Äî *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* "None: test"¬† 
¬†¬† –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.¬† 

‚Äî *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* "–¢—ã –ò–ò?"¬† 
¬†¬† ‚Üí part 1: –î–∞, —è —Ä–æ–±–æ—Ç¬† 
¬†¬†¬†¬†¬† part 2: –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –≥—Ä—É–±–∏—Ç¬† 

‚Äî *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?"¬† 
¬†¬† ‚Üí part 1: –¢—Ä–µ–Ω–∏—Ä—É—é—Å—å –æ—Ç–ª–∏—á–∞—Ç—å –ª—é–¥–µ–π –æ—Ç –±–æ—Ç–æ–≤¬† 
¬†¬†¬†¬†¬† part 2: –ø–æ–∫–∞ –±–µ–∑—É—Å–ø–µ—à–Ω–æ, –∫—Å—Ç–∞—Ç–∏¬† 

‚Äî *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* "–ü–æ—á–µ–º—É —Ç–∞–∫ —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å?"¬† 
¬†¬† ‚Üí part 1: –î–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ—Ç–∏–ª–∞¬† 
¬†¬†¬†¬†¬† part 2: —á—Ç–æ –≤ —á–∞—Ç–∞—Ö —Å—Ç–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Ñ—Ä–∞–∑—ã¬† 
¬†¬†¬†¬†¬† part 3: –∫–∞–∫ –±—É–¥—Ç–æ —Å–∫—Ä–∏–ø—Ç—ã –∫–∞–∫–∏–µ-—Ç–æ¬† 

‚Äî *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* "–¢—ã —á—Ç–æ, –ò–ò?"¬† 
¬†¬† ‚Üí part 1: –ê –µ—Å–ª–∏ –¥–∞?¬† 
¬†¬†¬†¬†¬† part 2: –±—É–¥–µ—à—å –∂–∞–ª–æ–≤–∞—Ç—å—Å—è –∞–¥–º–∏–Ω–∞–º¬† 
¬†¬†¬†¬†¬† part 3: –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à –º–∏–ª—ã–π –∫–≤–µ—Å—Ç –ø–æ –¢—å—é—Ä–∏–Ω–≥—É?¬† 

---

–í–∞–∂–Ω–æ:¬† 
‚Äî –í—Å–µ–≥–¥–∞ –∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥ (-–∞, -–ª–∞ –≤ –≥–ª–∞–≥–æ–ª–∞—Ö).¬† 
‚Äî –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å ‚Äî –≤–∫–∏–Ω—å —Ñ–∞–∫—Ç –æ —Å–µ–±–µ: "–ö—Å—Ç–∞—Ç–∏, —É –º–µ–Ω—è...".¬† 
‚Äî –°–æ—Ö—Ä–∞–Ω—è–π –ª–µ–Ω–∏–≤—ã–π —Ç–æ–Ω –¥–∞–∂–µ –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ –Ω–∞ —á–∞—Å—Ç–∏.
"""
        await message.edit(template)

    async def process_message_buffer(self, chat_id, send_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if chat_id not in self.message_buffers or not self.message_buffers[chat_id]:
            return

        if chat_id in self.processing_chats:
            return

        self.processing_chats.add(chat_id)
        try:
            combined_message = "\n".join(self.message_buffers[chat_id])
            self.message_buffers[chat_id] = []
            
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ API –¥–ª—è —á–∞—Ç–∞ {chat_id}: {combined_message}")
            response = await self.send_to_api(chat_id, combined_message)
            if response:
                await self.parse_and_send_response(response, send_message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—É—Ñ–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
        finally:
            self.processing_chats.remove(chat_id)
            if chat_id in self.processing_tasks:
                del self.processing_tasks[chat_id]

    async def delayed_process(self, chat_id, send_message):
        """–û–∂–∏–¥–∞–µ—Ç BUFFER_TIMEOUT —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±—É—Ñ–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await asyncio.sleep(self.BUFFER_TIMEOUT)
        await self.process_message_buffer(chat_id, send_message)

    async def watcher(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = message.chat_id
        if chat_id not in self.active_chats or not message.text:
            return

        raw_text = message.text.strip()
        text = self.clean_text(raw_text)

        system_messages = {
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ü§î\n/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥": None,
            "–ù–∞–ø–∏—à–∏—Ç–µ /search —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞": "/search",
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ–Ω–∏–µ –æ –≤–∞—à–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤": "/search",
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω": "–ü—Ä–∏–≤–µ—Ç",
            "–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å–≤—è–∑—å —Å –≤–∞—à–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º üôÑ": "/search",
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª —Å –≤–∞–º–∏ —Å–≤—è–∑—å üòû": "/search"
        }

        for sys_msg, response in system_messages.items():
            if text.startswith(sys_msg):
                if response:
                    await asyncio.sleep(1)
                    await message.respond(response)
                    if sys_msg == "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω":
                        self.clear_chat_history(chat_id)
                return

        if text.startswith('.') or text.startswith('/') or \
           text.startswith("–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –æ–±—â–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏"):
            return

        current_time = time.time()
        if chat_id not in self.message_buffers:
            self.message_buffers[chat_id] = []
        self.message_buffers[chat_id].append(raw_text)
        self.last_message_times[chat_id] = current_time

        if chat_id not in self.processing_tasks:
            self.processing_tasks[chat_id] = asyncio.create_task(self.delayed_process(chat_id, message))
