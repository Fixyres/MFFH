# meta developer: @hikkagpt
import json
import logging
import aiohttp
import base64
import os
from math import ceil

from telethon.tl.types import PeerUser
from .. import loader, utils

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
PERSONAS_FILE = "zetta_assistant_personas.json"
MODELS_PER_PAGE = 10
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–æ –≤ 10 —Ä–∞–∑
MAX_HISTORY_LENGTH = 200  # 100 –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç

available_models = {
    "1": "o3-PRO", "2": "o1-PRO", "3": "o3-Mini-High", "4": "Grok 3", "5": "GPT 4.1",
    "6": "qwen3-235b-a22b", "7": "qwen-max-latest", "8": "qwen-plus-2025-01-25",
    "9": "qwen-turbo-2025-02-11", "10": "qwen2.5-coder-32b-instruct",
    "11": "qwen2.5-72b-instruct", "12": "gpt-4.5", "13": "gpt-4o", "14": "gpt-4o-mini",
    "15": "gpt4-turbo", "16": "gpt-3.5-turbo", "17": "gpt-4", "18": "deepseek-v3",
    "19": "deepseek-r1", "20": "gemini-1.5 Pro", "21": "gemini-2.5-pro-exp-03-25",
    "22": "gemini-2.5-flash", "23": "gemini-2.0-flash", "24": "llama-4-maverick",
    "25": "llama-4-scout", "26": "llama-3.3-70b", "27": "llama-3.3-8b",
    "28": "llama-3.1", "29": "llama-2", "30": "claude-3.5-sonnet", "31": "claude-3-haiku",
    "32": "bard", "33": "qwen", "34": "t-pro", "35": "t-lite"
}

sorted_models = list(available_models.items())

def load_personas():
    try:
        with open(PERSONAS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_personas(personas):
    with open(PERSONAS_FILE, "w", encoding="utf-8") as f:
        json.dump(personas, f, indent=4, ensure_ascii=False)

personas = load_personas()


@loader.tds
class ZettaAIAssistantMod(loader.Module):
    """
>> –ß–∞—Å—Ç—å —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Zetta - AI models <<
üåí Version: 1.2 (Group Fix & Context Fix)
üìç–û–ø–∏—Å–∞–Ω–∏–µ:
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è –≤–∞—à–∏—Ö –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ Telegram.
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Zetta –∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å ¬´Zetta - AI models¬ª.

ü§ñ –ë–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ: @ZettaGPT4o_bot

üîÄ–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:
- –û—Ç–≤–µ—Ç –≤—Å–µ–º: –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –õ–°.
- –û—Ç–≤–µ—Ç –¥—Ä—É–∑—å—è–º: –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π.
- –í—Å–µ–º –∫—Ä–æ–º–µ –¥—Ä—É–∑–µ–π: –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç –≤—Å–µ–º, –∫—Ç–æ –ù–ï –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π.

‚öôÔ∏è –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ (–¥–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π).
- –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é `.zcfg`.
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞–º–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é `.zplugins`.
- –†–∞–∑–¥–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –∫–æ–º–∞–Ω–¥–∞–º–∏ (`.zrole`).
- –í—ã–±–æ—Ä –∏–∑ 35 –º–æ–¥–µ–ª–µ–π –ò–ò.

ü´∂ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @hikkagpt"""
    strings = {"name": "Zetta - AI Assistant"}

    def __init__(self):
        self.is_active = False
        self.response_mode = "all"
        self.friends = []
        self.default_model = "gpt-4o"
        self.role_all = "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Zetta. –¢—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö."
        self.role_friends = "–¢—ã ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ Zetta. –û–±—â–∞–π—Å—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. –¢—ã –ø—Ä–æ—Å—Ç–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫."
        self.human_mode = False
        self.provider = "OnlySq-Zetta"
        self.api_key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        self.history = {}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.is_active = self.db.get(self.strings["name"], "is_active", False)
        self.response_mode = self.db.get(self.strings["name"], "response_mode", "all")
        self.friends = self.db.get(self.strings["name"], "friends", [])
        self.default_model = self.db.get(self.strings["name"], "default_model", "gpt-4o-mini")
        self.role_all = self.db.get(self.strings["name"], "role_all", self.role_all)
        self.role_friends = self.db.get(self.strings["name"], "role_friends", self.role_friends)
        self.human_mode = self.db.get(self.strings["name"], "human_mode", False)
        self.provider = self.db.get(self.strings["name"], "provider", "OnlySq-Zetta")
        logging.info("Zetta - AI Assistant –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω.")

    @loader.watcher(no_commands=True)
    async def watcher(self, message):
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–µ–ª–µ–∑–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö.
        if not message.is_private:
            return

        if not self.is_active or message.out:
            return

        chat_id = message.chat_id
        is_friend = message.sender_id in [f['id'] for f in self.friends]

        if self.response_mode == "friends" and not is_friend:
            return
        if self.response_mode == "except_friends" and is_friend:
            return
            
        request_text = message.text
        if not request_text:
            return

        self.history.setdefault(chat_id, [])
        role_to_use = self.role_friends if is_friend else self.role_all

        messages_to_send = [{"role": "system", "content": role_to_use}]
        messages_to_send.extend(self.history[chat_id])
        messages_to_send.append({"role": "user", "content": request_text})

        try:
            answer = await self.send_request_to_api(messages_to_send, self.default_model)
            if answer:
                self.history[chat_id].append({"role": "user", "content": request_text})
                self.history[chat_id].append({"role": "assistant", "content": answer})

                if len(self.history[chat_id]) > MAX_HISTORY_LENGTH:
                    self.history[chat_id] = self.history[chat_id][-MAX_HISTORY_LENGTH:]

                if self.human_mode:
                    await message.reply(answer)
                else:
                    await message.reply(f"<b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ {self.default_model}:</b>\n{answer}")
        except Exception as e:
            logging.error(f"[ZettaAssistant] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # --- –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–ú–Ø–¢–¨–Æ ---

    @loader.unrestricted
    async def zclearcmd(self, message):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."""
        chat_id = message.chat_id
        if chat_id in self.history and self.history[chat_id]:
            self.history[chat_id] = []
            await utils.answer(message, "üü£ <b>–ò—Å—Ç–æ—Ä–∏—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.</b>")
        else:
            await utils.answer(message, "ü§∑ <b>–í —ç—Ç–æ–º —á–∞—Ç–µ –∏ —Ç–∞–∫ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏.</b>")

    @loader.unrestricted
    async def zallclearcmd(self, message):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤."""
        self.history = {}
        await utils.answer(message, "üü£ <b>–ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞.</b>")
        
    # --- –ö–û–ú–ê–ù–î–´, –¢–†–ï–ë–£–Æ–©–ò–ï –í–í–û–î–ê ---

    @loader.unrestricted
    async def zrolecmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è 'all' –∏–ª–∏ 'friends'."""
        args = utils.get_args_raw(message)
        if not args:
            usage_html = utils.escape_html(".zrole all <—Ç–µ–∫—Å—Ç> –∏–ª–∏ .zrole friends <—Ç–µ–∫—Å—Ç>")
            await utils.answer(message, (f"<b>–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏:</b>\n\n" f"<b>–î–ª—è –≤—Å–µ—Ö:</b> <i>{self.role_all}</i>\n\n" f"<b>–î–ª—è –¥—Ä—É–∑–µ–π:</b> <i>{self.role_friends}</i>\n\n" f"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>{usage_html}</code>"))
            return
        try: target, text = args.split(" ", 1)
        except ValueError: return await utils.answer(message, "ü§î <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b> –£–∫–∞–∂–∏—Ç–µ 'all' –∏–ª–∏ 'friends' –∏ —Ç–µ–∫—Å—Ç —Ä–æ–ª–∏.")
        if target.lower() == "all":
            self.role_all = text; self.db.set(self.strings["name"], "role_all", text)
            await utils.answer(message, "üü£ <b>–†–æ–ª—å –¥–ª—è '–≤—Å–µ—Ö' –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</b>")
        elif target.lower() == "friends":
            self.role_friends = text; self.db.set(self.strings["name"], "role_friends", text)
            await utils.answer(message, "üü£ <b>–†–æ–ª—å –¥–ª—è '–¥—Ä—É–∑–µ–π' –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</b>")
        else: await utils.answer(message, "ü§î <b>–¶–µ–ª—å –Ω–µ —è—Å–Ω–∞.</b> –£–∫–∞–∂–∏—Ç–µ 'all' –∏–ª–∏ 'friends'.")

    @loader.unrestricted
    async def zallrolecmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–Ω—É —Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –∏ –¥–ª—è –¥—Ä—É–∑–µ–π."""
        args = utils.get_args_raw(message)
        if not args: return await utils.answer(message, "ü§î <b>–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—â–µ–π —Ä–æ–ª–∏.</b>")
        self.role_all = args; self.role_friends = args
        self.db.set(self.strings["name"], "role_all", args)
        self.db.set(self.strings["name"], "role_friends", args)
        await utils.answer(message, "üü£ <b>–û–±—â–∞—è —Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –∏ –¥—Ä—É–∑–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</b>")

    @loader.unrestricted
    async def zplugincmd(self, message):
        """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–≥–∏–Ω."""
        args = utils.get_args_raw(message)
        try: name, role = args.split(" ", 1)
        except ValueError:
            usage_html = utils.escape_html(".zplugin <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è>")
            return await utils.answer(message, f"ü§î <b>–§–æ—Ä–º–∞—Ç:</b> <code>{usage_html}</code>")
        personas[name] = role; save_personas(personas)
        await utils.answer(message, f"üü£ <b>–ü–ª–∞–≥–∏–Ω '{name}' —Å–æ–∑–¥–∞–Ω.</b> –¢–µ–ø–µ—Ä—å –∏–º –º–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ <code>.zplugins</code>.")

    @loader.unrestricted
    async def zswitchcmd(self, message):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–ª–∞–≥–∏–Ω."""
        args = utils.get_args_raw(message)
        try: target, plugin_name = args.split(" ", 1)
        except ValueError:
            usage_html = utils.escape_html(".zswitch <all/friends> <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–ª–∞–≥–∏–Ω–∞>")
            return await utils.answer(message, f"ü§î <b>–§–æ—Ä–º–∞—Ç:</b> <code>{usage_html}</code>")
        if plugin_name not in personas: return await utils.answer(message, "üö´ <b>–ü–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
        role_text = personas[plugin_name]
        if target.lower() == "all":
            self.role_all = role_text; self.db.set(self.strings["name"], "role_all", role_text)
            await utils.answer(message, f"üü£ <b>–†–æ–ª—å –¥–ª—è '–≤—Å–µ—Ö' –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ –ø–ª–∞–≥–∏–Ω:</b> {plugin_name}")
        elif target.lower() == "friends":
            self.role_friends = role_text; self.db.set(self.strings["name"], "role_friends", role_text)
            await utils.answer(message, f"üü£ <b>–†–æ–ª—å –¥–ª—è '–¥—Ä—É–∑–µ–π' –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ –ø–ª–∞–≥–∏–Ω:</b> {plugin_name}")
        else: await utils.answer(message, "ü§î <b>–¶–µ–ª—å –Ω–µ —è—Å–Ω–∞.</b> –£–∫–∞–∂–∏—Ç–µ 'all' –∏–ª–∏ 'friends'.")
        
    @loader.unrestricted
    async def zfriendcmd(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥—Ä—É–∑—å—è."""
        args = utils.get_args_raw(message); reply = await message.get_reply_message(); user_to_add = None
        if args:
            try: user_to_add = await self.client.get_entity(args if not args.isdigit() else int(args))
            except Exception: pass
        elif reply: user_to_add = await reply.get_sender()
        else: return await utils.answer(message, "ü§î <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username/ID.</b>")
        if not user_to_add: return await utils.answer(message, "üö´ <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>")
        if user_to_add.id in [f['id'] for f in self.friends]: return await utils.answer(message, f"üü£ <b>{user_to_add.first_name}</b> —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π.")
        self.friends.append({"id": user_to_add.id, "name": user_to_add.first_name})
        self.db.set(self.strings["name"], "friends", self.friends)
        await utils.answer(message, f"ü´Ç <b>{user_to_add.first_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –≤ –¥—Ä—É–∑—å—è!")

    @loader.unrestricted
    async def zunfriendcmd(self, message):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥—Ä—É–∑–µ–π."""
        args = utils.get_args_raw(message); reply = await message.get_reply_message(); user_to_remove_id, user_name = None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        if args:
            try:
                user = await self.client.get_entity(args if not args.isdigit() else int(args))
                user_to_remove_id, user_name = user.id, user.first_name
            except Exception: pass
        elif reply:
            user = await reply.get_sender()
            user_to_remove_id, user_name = user.id, user.first_name
        else: return await utils.answer(message, "ü§î <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username/ID.</b>")
        if not user_to_remove_id: return await utils.answer(message, "üö´ <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>")
        if user_to_remove_id not in [f['id'] for f in self.friends]: return await utils.answer(message, f"ü§∑ <b>{user_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω(–∞) –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π.")
        self.friends = [f for f in self.friends if f['id'] != user_to_remove_id]
        self.db.set(self.strings["name"], "friends", self.friends)
        await utils.answer(message, f"üíî <b>{user_name}</b> —É–¥–∞–ª–µ–Ω(–∞) –∏–∑ –¥—Ä—É–∑–µ–π.")

    @loader.unrestricted
    async def zfriendscmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π."""
        if not self.friends: return await utils.answer(message, "ü§∑ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π.</b>")
        friends_list = "\n".join([f"‚Ä¢ <a href='tg://user?id={f['id']}'>{f['name']}</a>" for f in self.friends])
        await utils.answer(message, f"ü´Ç <b>–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π:</b>\n{friends_list}")

    # --- –ì–õ–ê–í–ù–û–ï –ò–ù–õ–ê–ô–ù-–ú–ï–ù–Æ ---

    @loader.unrestricted
    async def zcfgcmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        await self._menu_main(message)
    
    # --- –ö–û–õ–ë–≠–ö–ò –î–õ–Ø –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---
    
    async def _toggle_active_callback(self, call):
        self.is_active = not self.is_active; self.db.set(self.strings["name"], "is_active", self.is_active)
        await self._menu_main(call=call)

    async def _set_mode_callback(self, call, mode):
        self.response_mode = mode; self.db.set(self.strings["name"], "response_mode", self.response_mode)
        await self._menu_response_mode(call=call)

    async def _set_model_callback(self, call, model_key):
        self.default_model = available_models[model_key]; self.db.set(self.strings["name"], "default_model", self.default_model)
        await self._menu_main(call=call)

    async def _toggle_human_callback(self, call):
        self.human_mode = not self.human_mode; self.db.set(self.strings["name"], "human_mode", self.human_mode)
        await self._menu_other(call=call)

    async def _toggle_provider_callback(self, call):
        self.provider = "Devj" if self.provider == "OnlySq-Zetta" else "OnlySq-Zetta"
        self.db.set(self.strings["name"], "provider", self.provider)
        await self._menu_other(call=call)
        
    async def _nav_callback(self, call, page, page_num=0):
        menus = {"main": self._menu_main, "modes": self._menu_response_mode, "models": self._menu_model_select, "other": self._menu_other}
        target_menu = menus.get(page)
        if not target_menu: return
        if page == "models": await target_menu(call=call, page=int(page_num))
        else: await target_menu(call=call)
            
    # --- –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---
    
    async def _menu_main(self, source=None, call=None):
        status = "<b>–ê–∫—Ç–∏–≤–µ–Ω</b> üü£" if self.is_active else "<b>–í—ã–∫–ª—é—á–µ–Ω</b> ‚ö´Ô∏è"
        mode_map = {"all": "–í—Å–µ–º", "friends": "–¢–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è–º", "except_friends": "–í—Å–µ–º –∫—Ä–æ–º–µ –¥—Ä—É–∑–µ–π"}
        text = (f"üü£ <b>Zetta Assistant</b>\n\n<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n<b>–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞:</b> {mode_map.get(self.response_mode)}\n<b>–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:</b> {self.default_model}")
        buttons = [[{"text": "–í–∫–ª/–í—ã–∫–ª", "callback": self._toggle_active_callback}], [{"text": "‚öôÔ∏è –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞", "callback": self._nav_callback, "args": ("modes", 0)}], [{"text": "ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", "callback": self._nav_callback, "args": ("models", 0)}], [{"text": "üîß –ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "callback": self._nav_callback, "args": ("other", 0)}]]
        message_to_use = call or source
        if call: await call.edit(text, reply_markup=buttons)
        else: await self.inline.form(text, message=message_to_use, reply_markup=buttons)

    async def _menu_response_mode(self, call):
        text = "ü§î <b>–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç:</b>"
        buttons = [[{"text": f"{'‚úÖ ' if self.response_mode == 'all' else ''}–í—Å–µ–º", "callback": self._set_mode_callback, "args": ("all",)}, {"text": f"{'‚úÖ ' if self.response_mode == 'friends' else ''}–¢–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è–º", "callback": self._set_mode_callback, "args": ("friends",)}], [{"text": f"{'‚úÖ ' if self.response_mode == 'except_friends' else ''}–í—Å–µ–º, –∫—Ä–æ–º–µ –¥—Ä—É–∑–µ–π", "callback": self._set_mode_callback, "args": ("except_friends",)}], [{"text": "‚Äπ –ù–∞–∑–∞–¥", "callback": self._nav_callback, "args": ("main", 0)}]]
        await call.edit(text, reply_markup=buttons)
        
    async def _menu_model_select(self, call, page=0):
        text = f"ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ (–°—Ç—Ä. {page + 1}):</b>"
        start_index, end_index = page * MODELS_PER_PAGE, (page + 1) * MODELS_PER_PAGE
        page_models = sorted_models[start_index:end_index]
        buttons = [[{"text": f"{'‚úÖ ' if self.default_model == v else ''}{k}. {v}", "callback": self._set_model_callback, "args": (k,)}] for k, v in page_models]
        nav = []
        if page > 0: nav.append({"text": "‚Äπ –ü—Ä–µ–¥.", "callback": self._nav_callback, "args": ("models", page - 1)})
        if end_index < len(sorted_models): nav.append({"text": "–°–ª–µ–¥. ‚Ä∫", "callback": self._nav_callback, "args": ("models", page + 1)})
        buttons.append(nav)
        buttons.append([{"text": "‚Äπ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback": self._nav_callback, "args": ("main", 0)}])
        await call.edit(text, reply_markup=buttons)

    async def _menu_other(self, call):
        human_status = "üü£ –í–∫–ª—é—á–µ–Ω" if self.human_mode else "‚ö´Ô∏è –í—ã–∫–ª—é—á–µ–Ω"
        text = (f"üîß <b>–ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n<b>–†–µ–∂–∏–º '–ß–µ–ª–æ–≤–µ–∫–∞':</b> {human_status}\n<i>(–û—Ç–≤–µ—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –º–æ–¥–µ–ª–∏)</i>\n\n<b>API –ü—Ä–æ–≤–∞–π–¥–µ—Ä:</b> {self.provider}")
        buttons = [[{"text": "üë§ –í–∫–ª/–í—ã–∫–ª '–†–µ–∂–∏–º –ß–µ–ª–æ–≤–µ–∫–∞'", "callback": self._toggle_human_callback}], [{"text": "üîÑ –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", "callback": self._toggle_provider_callback}], [{"text": "‚Äπ –ù–∞–∑–∞–¥", "callback": self._nav_callback, "args": ("main", 0)}]]
        await call.edit(text, reply_markup=buttons)

    # --- –ò–ù–õ–ê–ô–ù-–ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–õ–ê–ì–ò–ù–ê–ú–ò ---
    
    @loader.unrestricted
    async def zpluginscmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞–º–∏."""
        await self._menu_plugins_list(message)

    async def _menu_plugins_list(self, source=None, call=None):
        if not personas:
            usage_html = utils.escape_html(".zplugincmd <–∏–º—è> <–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è>")
            text = f"üß© <b>–ü–ª–∞–≥–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π <code>{usage_html}</code>."
            buttons = [[{"text": "–ó–∞–∫—Ä—ã—Ç—å", "action": "close"}]]
        else:
            text = "üß© <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–≥–∏–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è."
            buttons = []
            for name in sorted(personas.keys()):
                buttons.append([{"text": f"üëÅÔ∏è {name}", "callback": self._plugin_view_callback, "args": (name,)}, {"text": f"‚ùå –£–¥–∞–ª–∏—Ç—å", "callback": self._plugin_delete_prompt_callback, "args": (name,)}])
            buttons.append([{"text": "–ó–∞–∫—Ä—ã—Ç—å", "action": "close"}])
        message_to_use = call or source
        if call: await call.edit(text, reply_markup=buttons)
        else: await self.inline.form(text, message=message_to_use, reply_markup=buttons)

    async def _plugin_view_callback(self, call, name):
        content = personas.get(name, "üö´ –ü–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        text = f"<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–ª–∞–≥–∏–Ω–∞ ¬´{name}¬ª:</b>\n\n<i>{utils.escape_html(content)}</i>"
        buttons = [[{"text": "‚Äπ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "callback": self._menu_plugins_list, "args": (None,)}]]
        await call.edit(text, reply_markup=buttons)

    async def _plugin_delete_prompt_callback(self, call, name):
        text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–ª–∞–≥–∏–Ω <b>¬´{name}¬ª</b>?\n\n<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.</b>"
        buttons = [[{"text": "–î–∞, —É–¥–∞–ª–∏—Ç—å", "callback": self._plugin_delete_confirm_callback, "args": (name,)}, {"text": "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", "callback": self._menu_plugins_list, "args": (None,)}]]
        await call.edit(text, reply_markup=buttons)

    async def _plugin_delete_confirm_callback(self, call, name):
        if name in personas: del personas[name]; save_personas(personas)
        await self._menu_plugins_list(call=call)

    # --- API ---

    async def send_request_to_api(self, messages, model):
        api_url = "http://109.172.94.236:5001/OnlySq-Zetta/v1/models" if self.provider == "OnlySq-Zetta" else "https://api.vysssotsky.ru/"
        if self.provider == 'Devj': payload = {"model": "gpt-4", "messages": messages, "max_tokens": 4096}
        else: payload = {"model": model, "request": {"messages": messages}}
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload, headers={"Authorization": f"Bearer {self.api_key}"}) as response:
                    response.raise_for_status(); data = await response.json()
                    if self.provider == 'Devj': answer = data.get("choices", [{}])[0].get("message", {}).get("content", "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
                    else: answer = base64.b64decode(data.get("answer", "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.").strip()).decode('utf-8')
                    return answer.strip()
        except aiohttp.ClientError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API ({self.provider}): {e}"); return f"üö´ –û—à–∏–±–∫–∞ API: {e}"
        except Exception as e:
            logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}"); return f"üö´ –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
