# meta developer: @strongred
# meta name: Mailing
# meta desc: |
#   üì¢ Mailing - –º–æ—â–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ Telegram
#   üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–∞–Ω–∞
#   üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Ç–æ–≤
#   üîπ –£–º–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
#   üîπ –°–µ–π—Ñ-—Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –æ—Ç–∫–ª—é—á–∞—Ç—å)

from .. import loader, utils
import asyncio
import time
import random
import logging
import re
from telethon.tl.types import Message

logger = logging.getLogger(__name__)

@loader.tds
class MailingMod(loader.Module):
    """Mailing - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ Telegram"""
    
    strings = {
        "name": "Mailing",
        "loading": (
            "üì¢ Mailing - –º–æ–¥—É–ª—å –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫\n\n"
            "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            ".msgo <–≤—Ä–µ–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> <—Ç–µ–∫—Å—Ç> - <i>–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)</i>\n"
            ".msstop - <i>–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</i>\n"
            ".msadd <—á–∞—Ç> - <i>–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç (@username –∏–ª–∏ -100ID)</i>\n"
            ".msdel <—á–∞—Ç> - <i>–£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞</i>\n"
            ".mslist - <i>–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤</i>\n"
            ".msmode - <i>–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∑–∞—â–∏—Ç—ã (–≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)</i>\n"
            ".msstats - <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</i>\n\n"
            "üõ°Ô∏è <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n"
            "- –°–µ–π—Ñ-—Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
            "- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
            "- –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å\n"
            "- –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞ –∏ –±–∞–Ω–∞\n\n"
            "ü´∂ <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> @strongred\n"
            "üì¢ <b>–ö–∞–Ω–∞–ª:</b> @ZOLOKEYFREE"
        ),
        "start": "üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ {} —á–∞—Ç–æ–≤ | –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫",
        "stop": "üõë –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "done": "‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ | –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {}",
        "args_error": "‚ùå –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .msgo <–≤—Ä–µ–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> <—Ç–µ–∫—Å—Ç>",
        "num_error": "‚ùå –û—à–∏–±–∫–∞: –í—Ä–µ–º—è –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏",
        "no_chats": "‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
        "invalid_chat": "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ -100ID)",
        "chat_exists": "‚ö†Ô∏è –ß–∞—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ",
        "chat_not_found": "‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ",
        "stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {}\n–û—à–∏–±–æ–∫: {}\n–õ–∏–º–∏—Ç: {}/—á–∞—Å",
        "protection": "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –±–∞–Ω–∞: {}",
        "protection_on": "–í–ö–õ–Æ–ß–ï–ù–ê (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
        "protection_off": "–í–´–ö–õ–Æ–ß–ï–ù–ê (—Ä–∏—Å–∫ –±–∞–Ω–∞!)"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "ms_chats",
                [],
                lambda: "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                validator=loader.validators.Series(
                    validator=loader.validators.String()
                )
            ),
            loader.ConfigValue(
                "ms_protection",
                True,
                lambda: "–ó–∞—â–∏—Ç–∞ –æ—Ç –±–∞–Ω–∞ (–≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "ms_limit",
                180,
                lambda: "–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å",
                validator=loader.validators.Integer(minimum=50, maximum=500)
            )
        )
        self.active = False
        self.task = None
        self.sent = 0
        self.errors = 0
        self.last_send = 0
        self.hourly_count = 0
        self.last_hour = time.time()

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        await self.client.send_message("me", self.strings["loading"])

    @loader.command()
    async def msgo(self, message):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏: .msgo <–≤—Ä–µ–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> <—Ç–µ–∫—Å—Ç>"""
        if self.active:
            await utils.answer(message, "‚ùó –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞")
            return

        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["args_error"])
            return

        try:
            args = args.split(" ", 2)
            duration = int(args[0])
            interval = max(int(args[1]), 15)
            text = args[2]
        except:
            await utils.answer(message, self.strings["num_error"])
            return

        chats = self._get_chats()
        if not chats:
            await utils.answer(message, self.strings["no_chats"])
            return

        self.active = True
        self.sent = 0
        self.errors = 0
        
        await utils.answer(message, self.strings["start"].format(len(chats), interval))

        end_time = time.time() + duration
        while self.active and time.time() < end_time:
            await self._send_to_chats(chats, text)
            if self.active and time.time() < end_time:
                await asyncio.sleep(interval)

        if self.active:
            await utils.answer(message, self.strings["done"].format(self.sent))
        self.active = False

    @loader.command()
    async def msstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: .msstop"""
        if not self.active:
            await utils.answer(message, "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
            return

        self.active = False
        await utils.answer(message, self.strings["stop"])

    @loader.command()
    async def msadd(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç: .msadd @username –∏–ª–∏ -100ID"""
        chat = utils.get_args_raw(message)
        if not chat:
            await utils.answer(message, self.strings["invalid_chat"])
            return

        if not self._validate_chat(chat):
            await utils.answer(message, self.strings["invalid_chat"])
            return

        norm_chat = self._normalize_chat(chat)
        if norm_chat in [self._normalize_chat(c) for c in self.config["ms_chats"]]:
            await utils.answer(message, self.strings["chat_exists"])
            return

        self.config["ms_chats"].append(chat)
        await utils.answer(message, f"‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {norm_chat}")

    @loader.command()
    async def msdel(self, message):
        """–£–¥–∞–ª–∏—Ç—å —á–∞—Ç: .msdel @username –∏–ª–∏ -100ID"""
        chat = utils.get_args_raw(message)
        if not chat:
            await utils.answer(message, "‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ —á–∞—Ç")
            return

        norm_chat = self._normalize_chat(chat)
        for i, c in enumerate(self.config["ms_chats"]):
            if self._normalize_chat(c) == norm_chat:
                self.config["ms_chats"].pop(i)
                await utils.answer(message, f"‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω: {norm_chat}")
                return

        await utils.answer(message, self.strings["chat_not_found"])

    @loader.command()
    async def mslist(self, message):
        """–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤: .mslist"""
        if not self.config["ms_chats"]:
            await utils.answer(message, self.strings["no_chats"])
            return

        chats = [self._normalize_chat(c) for c in self.config["ms_chats"]]
        await utils.answer(message, f"üìã –ß–∞—Ç—ã ({len(chats)}):\n" + "\n".join(f"‚Ä¢ {c}" for c in chats))

    @loader.command()
    async def msstats(self, message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: .msstats"""
        status = self.strings["protection_on"] if self.config["ms_protection"] else self.strings["protection_off"]
        stats = self.strings["stats"].format(
            self.sent,
            self.errors,
            self.hourly_count
        )
        await utils.answer(message, stats + "\n" + self.strings["protection"].format(status))

    @loader.command()
    async def msmode(self, message):
        """–†–µ–∂–∏–º –∑–∞—â–∏—Ç—ã: .msmode"""
        self.config["ms_protection"] = not self.config["ms_protection"]
        status = self.strings["protection_on"] if self.config["ms_protection"] else self.strings["protection_off"]
        await utils.answer(message, self.strings["protection"].format(status) + 
                         "\n‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞ –¥–µ—Ä–∂–∞—Ç—å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º!")

    def _get_chats(self):
        return list(set(self._normalize_chat(c) for c in self.config["ms_chats"] if c.strip()))

    def _validate_chat(self, chat):
        patterns = [
            r'^@[a-zA-Z0-9_]{5,32}$',
            r'^https://t\.me/[a-zA-Z0-9_]{5,32}$',
            r'^-100\d+$',
            r'^https://t\.me/c/\d+$'
        ]
        return any(re.fullmatch(p, chat) for p in patterns)

    def _normalize_chat(self, chat):
        if chat.startswith("https://t.me/c/"):
            return "-100" + chat.split("/c/")[1].split("/")[0]
        elif chat.startswith("https://t.me/"):
            return "@" + chat.split("t.me/")[1].split("/")[0]
        return chat

    async def _send_to_chats(self, chats, text):
        self._check_limits()
        for chat in chats:
            if not self.active:
                break
            await self._safe_send(chat, text)

    async def _safe_send(self, chat, text):
        try:
            if self.config["ms_protection"]:
                delay = random.uniform(2.5, 6.0)
                if time.time() - self.last_send < 10:
                    delay += random.uniform(1.0, 3.0)
                await asyncio.sleep(delay)

            await self.client.send_message(chat, text)
            self.sent += 1
            self.hourly_count += 1
            self.last_send = time.time()
        except Exception as e:
            self.errors += 1
            if "Too Many Requests" in str(e) and self.config["ms_protection"]:
                wait = random.randint(45, 180)
                await asyncio.sleep(wait)
                return await self._safe_send(chat, text)

    def _check_limits(self):
        now = time.time()
        if now - self.last_hour > 3600:
            self.hourly_count = 0
            self.last_hour = now

    async def on_unload(self):
        self.active = False
        if self.task:
            self.task.cancel()